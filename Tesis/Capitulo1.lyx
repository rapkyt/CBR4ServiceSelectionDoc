#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass myBook
\begin_preamble
% Added by lyx2lyx
\renewcommand{\textendash}{--}
\renewcommand{\textemdash}{---}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package babel
\inputencoding auto
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Motivación
\begin_inset CommandInset label
LatexCommand label
name "cap:motivacion"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:introMotivacion"

\end_inset


\end_layout

\begin_layout Standard
El paradigma de Computación Orientada a Servicios (SOC
\begin_inset Foot
status open

\begin_layout Plain Layout
SOC: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 Service-Oriented Computing
\end_layout

\end_inset

) es un campo interdisciplinar para el estudio, diseño, e implementación
 de sistemas distribuidos, y actúa como un paraguas que cubre todos los
 aspectos de computación utilizados \twohyphens
 especificación y diseño orientado
 a servicios, Arquitectura Orientada a Servicios (SOA
\begin_inset Foot
status open

\begin_layout Plain Layout
SOA: 
\emph on
Service Oriented Architecture
\end_layout

\end_inset

), Servicios Web, etc.
 \twohyphens
 siendo actualmente una de las áreas de investigación más activas en el
 ámbito de la informática.
 
\end_layout

\begin_layout Standard
Una práctica común para el desarrollo de software es reusar funcionalidad
 provista por terceras partes, lo cual no sólo ayuda a reducir los costos,
 sino también a enfocar el proceso de desarrollo en la funcionalidad principal
 del sistema.
 En este contexto, el crecimiento de la Web habilita a los desarrolladores
 a ofrecer software no sólo en forma de bibliotecas, sino como servicios
 \twohyphens
 componentes software que se pueden invocar de forma dinámica.
 En particular, la tecnología de Servicios Web es uno de los principales
 motivos para la adopción del paradigma SOC
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bichler06"

\end_inset

.
\end_layout

\begin_layout Standard
El sector de los servicios representa el mayor porcentaje de la economía
 en los países desarrollados, y es innegable que una gran parte de la innovación
 en servicios se basa en la tecnología informática, que ha contribuido con
 aportes concretos que configuran la base tecnológica para la implementación
 de servicios: SOA, Servicios Web o Computación en la Nube (
\emph on
Cloud Computing
\emph default
).
 Estos conceptos obligan a revisar los paradigmas de desarrollo de software,
 del mismo modo que en el ámbito de la gestión de proyectos se está evolucionand
o de una lógica basada en el producto a una basada en el servicio
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "vargo2004evolving"

\end_inset

, obligando a reformular conceptos como marketing, innovación, sostenibilidad,
 ciclo de vida, etc., de producto a servicio.
 En el ámbito de la informática también es necesario revisar todo lo existente
 en ingeniería de software para el desarrollo de sistemas de información
 clásicos, y adaptarlo para el desarrollo de sistemas orientados a servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ruiz2011ingenieria"

\end_inset

.
\end_layout

\begin_layout Standard
El paradigma SOC está siendo ampliamente aceptado como medio para abordar
 la actualización y automatización de un proceso de negocio abierto y colaborati
vo, principalmente porque permite exponer las competencias de una organización
 de manera estándar, programática y bajo pautas de celeridad y reducción
 de costos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Papazoglou07"

\end_inset

.
 
\end_layout

\begin_layout Standard
En general, las Aplicaciones Orientadas a Servicios se basan en la tecnología
 de Servicios Web: programas con una interfaz bien definida que puede ser
 localizada, publicada e invocada utilizando la infraestructura estándar
 de la Web
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bichler06"

\end_inset

.
 El paradigma SOC se presenta como una evolución de la construcción tradicional
 de sistemas desde cero hacia la reutilización masiva de software, generando
 un proceso de desarrollo basado en el descubrimiento y combinación de piezas
 de software provistas por terceras partes
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Sivashanmugam03"

\end_inset

.
 Su principal objetivo es el desarrollo de aplicaciones distribuidas en
 ambientes heterogéneos, donde los sistemas se construyen ensamblando o
 componiendo funcionalidad existente, denominada servicio.
 Estos servicios se publican a través de una red y es posible su acceso
 mediante protocolos específicos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Erickson08"

\end_inset

.
 La infraestructura tecnológica de soporte al paradigma SOC está provisto
 por SOA, donde se define la interacción entre clientes o consumidores y
 los proveedores de servicios a través del intercambio de mensajes.
 Una entidad de descubrimiento puede ser vista como un registro o directorio
 de servicios, y permite que un proveedor publique sus servicios y que luego
 un consumidor pueda realizar un descubrimiento de tales servicios.
\end_layout

\begin_layout Standard
El paradigma SOC provee ventajas muy claras, dado que genera un bajo grado
 de acoplamiento entre consumidor/proveedor de un determinado servicio y
 además promueve fuertemente la reusabilidad de componentes software.
 Sin embargo, se produce un incremento de esfuerzo en dos etapas de un proyecto
 de desarrollo de software: implementación y mantenimiento
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Huhns05"

\end_inset

.
 En primer lugar, la búsqueda de servicios publicados en un registro requiere
 invertir mucho tiempo, en particular considerando el registro UDDI
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
UDDI: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 http://uddi.xml.org/
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 (Universal Description, Discovery, and Integration) para la tecnología
 de Servicios Web
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "UDDI04"

\end_inset

.
 Esto impacta directamente en los costos de la fase de implementación, ya
 que el paradigma SOC reemplaza el desarrollo de piezas específicas por
 el descubrimiento y contratación de las mismas.
 En segundo lugar, al introducir servicios externos a una aplicación, en
 general se produce un efecto colateral donde la lógica del negocio queda
 
\begin_inset Quotes eld
\end_inset

contaminada
\begin_inset Quotes erd
\end_inset

 con aspectos no funcionales, tales como localización, comunicación de datos
 sobre la red, etc.
 Esto no es un atributo de calidad deseable, dado que produce sistemas difíciles
 de entender, mantener y extender
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Erickson08"

\end_inset

.
 Además, los frameworks actuales para invocar servicios, por ejemplo WSIF
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
WSIF: Web Services Invocation Framework, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 http://ws.apache.org/wsif/
\end_layout

\end_inset

, producen código fuente subordinado a un determinado proveedor de servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Duftler01"

\end_inset

.
 En consecuencia, ante los cambios en las interfaces de los servicios externos
 o su reemplazo por nuevos proveedores, se requiere reconstruir el código
 para efectuar la invocación de los mismos, lo cual propaga cambios por
 las partes 
\begin_inset Quotes eld
\end_inset

contaminadas
\begin_inset Quotes erd
\end_inset

 de la aplicación
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Mateos10"

\end_inset

.
 Esta situación, por lo tanto, genera un alto impacto sobre los costos en
 la etapa de mantenimiento de software.
\end_layout

\begin_layout Standard
Si bien existen esfuerzos actuales en la identificación de servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "garriga2015web"

\end_inset

, que poseen mecanismos semi-automáticos para facilitar la tarea de un desarroll
ador, en general proveen resultados parciales compuestos de conjuntos de
 servicios candidatos, donde aún deben efectuarse tareas manuales de análisis
 para realizar la selección definitiva del servicio candidato más adecuado.
 Tales conjuntos de servicios candidatos pueden variar tanto en la interfaz
 esperada como en el comportamiento que se requiere dentro de una aplicación
 de destino.
 En general, la búsqueda de servicios se resuelve mediante un conjunto específic
o de palabras clave, considerando que las mismas fueron utilizadas para
 categorizar y ubicar los servicios dentro de un registro.
 Sin embargo, esto significa que se está confiando en que el criterio de
 publicación y categorización del Servicio Web será el mismo (o similar)
 al utilizado por el desarrollador (o consumidor) que busca dicho servicio.
 Por otra parte, el conjunto de servicios candidatos puede asumir un tamaño
 considerable, a partir de lo cual la tarea de selección de un servicio
 adecuado demanda un esfuerzo desproporcionado, que afecta seriamente los
 costos de la fase de desarrollo de una aplicación y por lo tanto incrementa
 los costos totales.
\end_layout

\begin_layout Standard
La motivación de esta tesis es alcanzar un enfoque que facilite el desarrollo
 de aplicaciones orientadas a servicios, asistiendo a los desarrolladores
 en la tarea de evaluación y selección de servicios candidatos.
 Para ello es necesario un análisis a nivel de contrato \twohyphens
 i.e., de los elementos
 que forman las funcionalidad ofrecida por el servicio.
 Además, se requiere que dicho enfoque incorpore algún mecanismo de aprendizaje
 semi-automático para mejorar su performance incorporando información a
 partir del uso
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "de2016case"

\end_inset

.
 Es por esto que se decidió incorporar lo realizado en trabajos previos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "castro16,cava18,DeRenzis13"

\end_inset

, donde se definió la evaluación a nivel de contrato de servicios considerando
 aspectos estructurales y semánticos, en el marco de la metodología Razonamiento
 Basado en Casos (CBR
\begin_inset Foot
status open

\begin_layout Plain Layout
CBR: 
\emph on
Case Based Reasoning
\end_layout

\end_inset

) adoptada en la presente tesis.
 CBR proviene del campo de la Inteligencia Artificial y aporta algunos aspectos
 cruciales para resolver los problemas antes mencionados en la evaluación
 y selección de Servicios Web, mediante el uso y la adaptación de soluciones
 existentes para problemas recurrentes.
 
\end_layout

\begin_layout Standard
Sin embargo, existen además limitaciones con respecto al tipo de descripciones
 de origen que se soportan, por la falta de herramientas automatizadas para
 realizar la derivación desde otro tipo de descripciones hacia el Metamodelo
 de servicios.
 Se agrega entonces el desafio de aumentar el cubrimiento de las mismas
 incorporando al estándar de especificación OpenAPI
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "IANA"

\end_inset

, utilizada para especificar servicios REST (de REpresentational State Transfer)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "fielding2000architectural"

\end_inset

 y microservicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "lewis2014microservices"

\end_inset

, que son consumidos a través de métodos HTTP tradicionales (típicamente
 GET, PUT, POST y DELETE).
 Esto permitiría ampliar la oferta de servicios accesibles a un proceso
 de evaluación, evitando las limitaciones de los formatos de descripción
 en servicios heterogéneos, permitiendo una amplia gama de servicios que
 podrían ser integrados, compuestos y consumidos para satisfacer los requerimien
tos de las Aplicaciones Orientadas a Servicios.
\end_layout

\begin_layout Subsection
Solución propuesta
\begin_inset CommandInset label
LatexCommand label
name "subsec:Solución-propuesta"

\end_inset


\end_layout

\begin_layout Standard
En esta tesis se profundiza la investigación sobre el enfoque que ha sido
 definido en tesis anteriores
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "castro16,Cors12,DeRenzis13,Garriga10"

\end_inset

, cuyo objetivo es la mejora del desarrollo de Aplicaciones Orientadas a
 Servicios; asistiendo a los ingenieros de software por medio de una serie
 de procesos semi-automáticos para la Selección de Servicios Web.
 Se retoma además el enfoque que se ha definido en tesis recientes
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "cava18"

\end_inset

, para la especificación de contratos de Servicios Web independientes de
 la tecnología, desarrollando un Metamodelo que utiliza como base un conjunto
 de estándares para descripción de contratos/responsabilidades de Servicios
 Web heterogéneos.
 En este sentido, el trabajo de esta tesis propone una reingeniería del
 proceso de selección y de su herramienta de soporte de acuerdo a CBR, enfocando
 en la estandarización de la descripción de servicios para aumentar la independe
ncia respecto de la tecnología.
\end_layout

\begin_layout Paragraph
Objetivo
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "13cm"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center

\emph on
\begin_inset Quotes eld
\end_inset

Definir e implementar un proceso de evaluación y selección de Servicios
 Web utilizando Razonamiento Basado en Casos (CBR)
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
El mismo se desglosa en tres objetivos específicos que se abordarán a lo
 largo de la tesis:
\end_layout

\begin_layout Paragraph

\emph on
Definir un proceso de evaluación de servicios utilizando Razonamiento Basado
 en Casos (CBR).
\end_layout

\begin_layout Standard
En primer lugar proponemos utilizar la metodología de Razonamiento basado
 en casos para evaluación de servicios.
 Un razonador basado en casos resuelve nuevos problemas mediante el uso
 y la adaptación de soluciones existentes para problemas anteriores y recurrente
s.
 A veces llamados sistemas de búsqueda por similitud, su efectividad viene
 dada por la función de similitud que se utiliza para cuantificar el grado
 de cercanía entre un par de casos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "de2016case"

\end_inset

.
 Luego, nuestra propuesta implica trazar un paralelo entre el problema de
 descubrimiento, selección y evaluación de servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Garriga2018isf"

\end_inset

, y los pasos de la metodología CBR, conocidos como las cuatro R
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "aamodt1994case"

\end_inset

: 
\end_layout

\begin_layout Enumerate
Recuperar los casos más similares a un problema; 
\end_layout

\begin_layout Enumerate
Reusar la información y el conocimiento disponible para intentar resolver
 el problema, 
\end_layout

\begin_layout Enumerate
Revisar la solución propuesta si fuera necesario, y 
\end_layout

\begin_layout Enumerate
Retener las partes de esta experiencia que sirvan para aprendizaje y utilización
 para resolución de problemas futuros.
\end_layout

\begin_layout Standard
Para ello se requiere por un lado definir una representación de los casos
 (problema-solución) que capture la información relevante presente en las
 especificaciones de servicios (descriptas según el Metamodelo de servicios);
 y además definir la función de similitud, que utilice los aspectos estructurale
s y semánticos en dichas descripciones de servicios.
 Finalmente, en base a dicha función de similitud se requiere definir la(s)
 estrategia(s) de clasificación de casos \twohyphens
 es decir, cuáles son los casos
 relevantes para cada problema.
 Se utilizarán desde estrategias clásicas de clasificación como la de K
 vecinos más cercanos (KNN) hasta otras más avanzadas como WKNN (KNN con
 pesos) y DWKNN (KNN con pesos y distancias)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "aamodt1994case"

\end_inset

.
\end_layout

\begin_layout Paragraph

\emph on
Desarrollar los componentes necesarios para la evaluación de servicios heterogén
eos.
 
\end_layout

\begin_layout Standard
En particular, un conversor de descripciones OpenAPI a instancias del Metamodelo
 de servicios, y una Base de Conocimiento (KB) persistente.
 Al contar con un Metamodelo de servicios donde se describen contratos ofrecidos
 por Servicios Web, resulta necesario que la representación y evaluación
 de casos (de acuerdo al esquema CBR) se realice en función de instancias
 del Metamodelo, que proveen la capacidad de describir servicios heterogéneos.
 Pensar en generar casos manualmente para un gran número de servicios (cientos
 o miles), resulta completamente impracticable.
 Por ello, se debe en primer lugar generar las instancias del Metamodelo
 de servicios de manera automática, para luego generar los pares problema-soluci
ón que poblarán la base de conocimiento.
 En tesis anteriores, se desarrolló un componente que a, partir de una descripci
ón WSDL correspondiente a un Servicio Web, genera una instancia del Metamodelo
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "cava18"

\end_inset

.
 Luego, es necesario desarrollar un componente análogo en base a otras especific
aciones comunes en la industria.
 Entre ellas, el estándar OpenAPI goza de amplia adopción (en particular
 para describir servicios REST) y no existen aún herramientas automatizadas
 de conversión.
 
\end_layout

\begin_layout Standard
Una vez que se dispone de los datasets de servicios heterogéneos, descriptos
 como instancias del Metamodelo de servicios, se debe desarrollar un componente
 que permita utilizar los mismos para popular la base de conocimiento (KB),
 de acuerdo a la metodología de CBR.
 Una KB captura el conocimiento obtenido de la experiencia, es decir, de
 los servicios seleccionados con anterioridad; para luego reutilizar dicho
 conocimiento en la solución de problemas futuros.
 Por ello, se requiere que sea persistente, así la información almacenada
 puede utilizarse posteriormente.
 Así, la KB se compondrá de casos, que son pares problema-solución: el problema
 es una instancia del Metamodelo de servicios, mientras que la solución
 viene dada por cierta información asociada al servicio que provee una interfaz
 similar.
 Finalmente, contar con una KB persistente que almacene casos basados en
 instancias del Metamodelo de servicios, nos permitirá validar el esquema
 de evaluación y selección propuesto así como los mecanismos de aprendizaje
 (Retención, paso 4 de la metodología CBR).
\end_layout

\begin_layout Paragraph

\emph on
Realizar la integración de los componentes desarrollados ajustando los mecanismo
s de evaluación existentes.
\end_layout

\begin_layout Standard
Finalmente, se deben integrar los componentes desarrollados (generador de
 instancias del metamodelo, KB) con los mecanismos de evaluación y selección
 de servicios presentados a lo largo de trabajos previos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Garriga2018isf,cava18"

\end_inset

 para conformar una herramienta de soporte automatizado al proceso de CBR
 para evaluación y selección de servicios.
 Para ello, se debe extraer y reutilizar la lógica subyacente a los componentes
 de evaluación de servicios existentes.
 Entre otras, es de vital importancia reutilizar los mecanismos de evaluación
 semántico-estructural de elementos de signatura (nombres de operaciones,
 parámetros de entrada/salida, tipos de datos complejos, etc.) que constituirán
 la función de similitud en el esquema CBR.
\end_layout

\begin_layout Paragraph
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Lo que resta del presente capítulo se organiza de la siguiente manera.
 En la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:soc"

\end_inset

 se introducen algunos conceptos relacionados a Aplicaciones Orientadas
 a Servicios, el paradigma SOC, y la tecnología de Servicios Web.
 En la Sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Descripción-de-Servicios"

\end_inset

 se presentan los estándares que han sido considerados como base para la
 descripción de servicios en SOA.
 Finalmente en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:organizacion"

\end_inset

 se describe la organización del resto de los capítulos de esta tesis.
\end_layout

\begin_layout Section
Aplicaciones Orientadas a Servicios
\begin_inset CommandInset label
LatexCommand label
name "sec:Aplicaciones-Orientadas-a-Servicios"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:soc"

\end_inset


\end_layout

\begin_layout Standard
En el paradigma SOC, un 
\emph on
servicio
\emph default
 se considera un contenedor de capacidades para un propósito común que define
 un contexto funcional distintivo.
 Tales capacidades se expresan de acuerdo con un contrato de servicio
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Erl08"

\end_inset

, y se encuentran encapsuladas como funciones autónomas que interactúan
 a través de una interfaz bien definida.
 Una definición de servicio debe incluir un identificador (ID), la interfaz
 (que describe los medios para comunicarse con el entorno del servicio)
 y su comportamiento operacional (un conjunto de operaciones a ser ejecutadas
 de acuerdo con alguna estructura interna de control)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Massuthe05"

\end_inset

.
\end_layout

\begin_layout Standard
Desde una perspectiva de negocios, una Aplicación Orientada a Servicios
 implica una solución de cara a un negocio, la cual consume servicios de
 uno o más proveedores y los integra en un proceso de negocios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Sprott04"

\end_inset

.
 Desde una perspectiva arquitectónica, puede ser vista como una aplicación
 basada en componentes, la cual es creada a partir de ensamblar dos tipos
 de componentes: 
\emph on
internos
\emph default
, que son embebidos dentro de la aplicación, y 
\emph on
externos
\emph default
, que se encuentran estática o dinámicamente vinculados \threehyphens
 ambos exponiendo
 una clara interfaz de sus capacidades funcionales
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Mateos10"

\end_inset

.
 Cuando se construye una nueva aplicación, el ingeniero de software debe
 tomar la decisión de proveer una implementación para algún componente de
 la aplicación, o bien, utilizar una implementación ya existente.
 Esto se denomina 
\emph on
tercerización
\emph default
, es decir llenar el espacio que deja una funcionalidad faltante, con la
 implementación de un servicio existente, desarrollado por terceras partes
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Papazoglou07"

\end_inset

.
 Así, el paradigma SOC reemplaza el desarrollo de un componente software
 dado con una combinación de distintas actividades: 
\emph on
descubrimiento
\emph default
, 
\emph on
selección
\emph default
 e 
\emph on
integración
\emph default
 de servicios en aplicaciones
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Huhns05,Bichler06"

\end_inset

.
 
\end_layout

\begin_layout Standard
La Arquitectura Orientada a Servicios (SOA) incluye componentes capaces
 de: 1) intercambiar mensajes, 2) describir los servicios, 3) publicar y
 descubrir las descripciones de los servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Stevens03"

\end_inset

.
 En SOA se define la interacción entre componentes software como un intercambio
 de mensajes entre 
\emph on
solicitantes
\emph default
 y 
\emph on
proveedores
\emph default
 de servicios, mediante un 
\emph on
agente de servicios
\emph default
, como se muestra en la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SOA"

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Erickson08,Gorton06"

\end_inset

.
 Un componente 
\emph on
solicitante
\emph default
 realiza la búsqueda de un servicio en el registro que provee un 
\emph on
agente de servicios
\emph default
 de acuerdo a sus necesidades y solicita la ejecución del mismo.
 Un componente 
\emph on
proveedor
\emph default
 es responsable de publicar la descripción de un servicio en el registro
 de un 
\emph on
agente de servicios
\emph default
, así como aceptar y ejecutar las solicitudes de dichos servicios.
 Un componente puede asumir tanto el rol de proveedor como de solicitante
 de servicios.
 Un 
\emph on
agente de servicios
\emph default
 es un componente en el cual el servicio es publicado, puede ser descubierto
 y/o ser ser visto como un registro o directorio de servicios.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
vspace*{.2cm}
\end_layout

\end_inset


\begin_inset Float figure
placement ht
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter1/SOC.pdf
	width 70text%

\end_inset

 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset VSpace -0.3cm*
\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SOA"

\end_inset

Arquitectura básica de un sistema orientado a servicios
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
vspace*{-.3cm}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tecnología de Servicios Web
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tecnología-de-Servicios"

\end_inset


\end_layout

\begin_layout Standard
En su mayoría, la industria del software ha adoptado el paradigma SOC utilizando
 la tecnología de Servicios Web, donde el concepto de servicio se implementa
 mediante una interfaz (típicamente especificada en WSDL) y un identificador
 dado por un URI
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Massuthe05,Papazoglou07"

\end_inset

.
 En el mismo sentido, la W3C
\begin_inset Foot
status open

\begin_layout Plain Layout
W3C: 
\emph on
World Wide Web Consortium
\end_layout

\end_inset

 define que ``
\emph on
un servicio Web es un sistema software (identificado por un URI), diseñado
 para soportar la interacción máquina-a-maquina sobre una red interoperable.
 Tiene una interfaz descripta en un formato procesable por máquina (específicame
nte WSDL), y otros sistemas interactúan con el Servicio Web de la manera
 que prescribe su descripción, utilizando (por lo general) mensajes SOAP
 transmitidos mediante HTTP con una serialización XML, junto con otros estándare
s de la Web
\emph default
''
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Booth04"

\end_inset

.
 La arquitectura de Servicios Web
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Weerawarana05"

\end_inset

 consta de una serie de protocolos de acceso, que si bien se encuentran
 en constante evolución, se los puede agrupar actualmente en cuatro capas
 principales, como se observa en la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:swProtocols"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ht
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset VSpace 0.2cm*
\end_inset

 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter1/SW_Protocols.pdf
	width 8cm

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace -0.3cm*
\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitectura de Protocolos de Servicios Web
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:swProtocols"

\end_inset

 
\begin_inset VSpace -0.3cm*
\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La capa inferior, denominada capa de 
\shape slanted
Transporte
\shape default
, es la responsable de transportar los mensajes entre los componentes software,
 y actualmente incluye los protocolos HTTP (
\emph on
Hyper Text Transfer Protocol
\emph default
), SMTP (
\emph on
Simple Mail Transfer Protocol
\emph default
), y FTP (
\emph on
File Transfer Protocol
\emph default
), entre otros.
 La capa de 
\shape slanted
Mensajes
\shape default
 es la responsable de codificar los mensajes en un único formato XML (
\emph on
eXtensible Markup Language
\emph default
), para lograr un entendimiento común.
 Esta capa incluye protocolos como XML-RPC (
\emph on
XML-Remote Procedure Call
\emph default
) y SOAP (
\emph on
Simple Object Access Protocol
\emph default
).
 La capa de 
\shape slanted
Descripción
\shape default
 de servicios es la responsable de describir la interfaz pública de un Servicio
 Web específico, que actualmente se logra a través del protocolo WSDL.
 Por último, la capa de 
\shape slanted
Descubrimiento
\shape default
 de servicios es la responsable de centralizar servicios y proveer una interfaz
 para la búsqueda y publicación de servicios.
 
\end_layout

\begin_layout Paragraph
Servicios RESTFul
\begin_inset CommandInset label
LatexCommand label
name "par:Servicios-RESTFul"

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En los últimos años, los servicios RESTful \twohyphens
 REpresentational State Transfer
 \twohyphens
 
\begin_inset CommandInset citation
LatexCommand cite
key "fielding2000architectural"

\end_inset

 aparecieron como una alternativa ligera y rentable para los servicios tradicion
ales basados en SOAP, descriptos en la sección anterior.
 Los servicios RESTful livianos están diseñados para facilitar el consumo,
 la composición y la creación de servicios por la comunidad (denominados
 
\emph on
mashups
\emph default
).
 REST utiliza los métodos HTTP (PUT, POST, GET y DELETE) para acceder a
 cualquier 
\emph on
recurso
\emph default
 (servicio) referenciable mediante un identificador unificado (URI)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "fielding2000architectural"

\end_inset

.
 Así, los métodos HTTP se convierten en una suerte de API
\begin_inset Foot
status open

\begin_layout Plain Layout
API: 
\emph on
Application Programming Interface
\end_layout

\end_inset

 estándar para interactuar con cualquier recurso, por ejemplo, cualquier
 pieza de datos de la Web, como un documento, un tweet o un pronóstico del
 tiempo.
 
\end_layout

\begin_layout Standard
La primer fortaleza de los servicios RESTful es que son más simples que
 los servicios SOAP porque REST aprovecha los estándares Web conocidos,
 como son HTTP de la capa de aplicación o transporte y XML de la capa de
 sesión (Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:swProtocols"

\end_inset

), además cuenta con el URI y la única infraestructura necesaria es la Web.
 Los clientes y servidores HTTP están disponibles para todos los principales
 lenguajes de programación y sistemas operativos/plataformas de hardware.
 Esto lleva a la segunda fortaleza de los servicios RESTful, ligereza, donde
 los servicios se pueden construir e invocar con herramientas mínimas 
\begin_inset CommandInset citation
LatexCommand cite
key "pautasso2008restful"

\end_inset

.
 Los servicios son fáciles de consumir, donde los dispositivos móviles con
 diferentes capacidades pueden actuar como clientes e incluso servidores
 o hosts para Servicios Web.
 Las nociones de simplicidad y ligereza hacen que sea escalable, para mantener
 un gran número de clientes, gracias al soporte integrado para el almacenamiento
 de caché y el manejo de carga (
\emph on
load balance
\emph default
) de REST.
 El hecho de no tener que almacenar el estado (
\emph on
stateless
\emph default
) entre las solicitudes permite que el servidor libere rápidamente los recursos
 y simplifique la implementación
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "fielding2000architectural"

\end_inset

.
 Además, los servidores sin estado permiten al usuario del servicio (humano
 o máquina) manipular directamente el estado de la aplicación a través de
 la navegación por hipervínculos, lo que se conoce como el principio HATEOAS
 (
\emph on
Hypermedia As The Engine of the Application State
\emph default
).
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
En relación con WADL y OpenAPI, el objetivo de las mismas es definir contratos,
 que especifiquen cómo es la comunicación entre los socios de negocios.
 Si se crease una aplicación hogareña desde cero, no sería necesario definir
 contratos; pero el enfoque que se espera en el presente trabajo es para
 desarrollos de software extensos tipo empresariales o gubernamentales,
 donde sí es necesario contratos que definan lo más estrictamente posible
 la manera en que los mensajes serán eviados/recibidos.
 Además de definir contratos, mediante las especificaciones, se permite
 generar código, testeo y documentación con herramientas de software ya
 disponibles como lo sería un generador de cliente REST en base a un documento
 WADL o especificación OpenAPI
\begin_inset space ~
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.npmjs.com/package/rest-client-generator
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Descripción de Servicios en SOA
\begin_inset CommandInset label
LatexCommand label
name "sec:Descripción-de-Servicios"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Background"

\end_inset


\end_layout

\begin_layout Standard
Este trabajo está motivado por la necesidad de evaluar y seleccionar contratos
 de servicios heterogéneos, para lo cual se propuso extender el Metamodelo,
 añadiendo un generador de instancias a partir de especificaciones OpenAPI.
 Con esto, los estándares que fueron considerados para definir el metamodelo
 (o cubiertos por el mismo) son: WSDL, WADL, SoaML (estándares OMG) y OpenAPI.
 A continuación se detallan los aspectos principales de cada uno.
\end_layout

\begin_layout Paragraph
WSDL
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
WSDL
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Web Services Description Language.
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/TR/wsdl
\end_layout

\end_inset


\end_layout

\end_inset

 es un lenguaje basado en XML utilizado para describir la funcionalidad
 que proporciona un Servicio Web.
 Un documento WSDL proporciona una descripción de la interfaz de un Servicio
 Web entendible por la máquina, indicando cómo se debe invocar al servicio,
 qué parámetros espera, y qué estructuras de datos retorna.
 Un documento WSDL define un servicio como una colección de puertos (
\emph on
porttypes
\emph default
), que son a su vez colecciones abstractas de operaciones.
 En el WSDL la definición abstracta de los puertos y mensajes son separados
 de su implementación concreta o ligadura (
\emph on
binding
\emph default
) al formato.
 Esto permite el reuso de definiciones abstractas.
 Los mensajes son descripciones abstractas de los datos que serán intercambiados
 en los distintos tipos de puertos que existen.
 Al usar un lenguaje de programación, se puede crear la parte concreta implement
ando la parte abstracta.
 
\end_layout

\begin_layout Standard
La versión actual del estándar WSDL es la 2.0
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/TR/wsdl20/ 
\end_layout

\end_inset


\end_layout

\end_inset

.
 En la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "DiferenciaEntreWSDL1.1YWSDL2.0"

\end_inset

 se muestra la estructura que siguen los archivos WSDL en las versiones
 1.1 y 2.0, en donde se observa el cambio de nomenclatura para la versión
 2.0.
 Además, WSDL 2.0 puede usarse para describir servicios REST
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "pautasso2009restful"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ImgChapter1/diferenciaEntreWSDLUnoYDosII.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diferencia estructural entre WSDL 1.1 y WSDL 2.0
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "DiferenciaEntreWSDL1.1YWSDL2.0"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
WSDL Versión 1.1
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
En concreto, un documento WSDL versión 1.1 usa los siguientes elementos para
 la definición de los servicios de red: 
\end_layout

\begin_layout Plain Layout
Types: un contenedor para la definición de tipos que posteriormente se utiliza
 en el intercambio de mensajes usando algún sistema de tipos.
 Podemos definir dichos tipos directamente dentro de este elemento, o importar
 la definición de un archivo de esquema (XSD).
 La definición de tipos puede verse, por ejemplo, como las definiciones
 de clases Java, con variables que pueden ser de tipo primitivo o referencias
 a otras clases u objetos.
 Los tipos primitivos se definen en los espacios de nombres del Schema (namespac
es) e incluyen tipos simples tales como string, int, double, etc.
 
\end_layout

\begin_layout Plain Layout
Message: una definición abstracta de tipos de datos que van a a ser comunicados.
 Un mensaje consiste en partes lógicas, cada una asociada con una definición
 encuadrada en un sistema de tipos.
 Es necesario definir los mensajes de entrada y salida para cada operación
 que ofrezca el servicio.
 
\end_layout

\begin_layout Plain Layout
Operation: una descripción abstracta de las acciones que soporta el servicio.
 
\end_layout

\begin_layout Plain Layout
Port Type: colecciones abstractas de operaciones soportadas por más de un
 punto de acceso (
\emph on
endpoint
\emph default
).
 Cada punto de acceso indica una localización específica para acceder a
 un Servicio Web usando un protocolo y formato de datos específico.
 Un punto de acceso es una entidad o recurso referenciable al que se puede
 enviar mensajes.
 Una referencia a un punto de acceso debe proporcionar toda la información
 necesaria para direccionar un punto de acceso.
 Cada operación refiere a mensajes de entrada y mensajes de salida, utilizando
 para ello los mensajes definidos en el apartado anterior.
 
\end_layout

\begin_layout Plain Layout
Binding: especifica el protocolo de red concreto y el formato de los datos
 para las operaciones y mensajes definidos en un PortType en particular.
 Un portType puede tener múltiples bindings asociados.
 El formato de datos utilizado para los mensajes de las operaciones del
 portType puede ser orientado al documento u orientado a RPC (Remote Procedure
 Call)
\begin_inset Foot
status open

\begin_layout Plain Layout
https://technet.microsoft.com/en-us/library/cc787851(v=ws.10).aspx
\end_layout

\end_inset

.
 Si es orientado al documento tanto el mensaje de entrada como el de salida
 contendrán un documento XML.
 Si es orientado a RPC el mensaje de entrada contendrá el método invocado
 y sus parámetros, y el de salida el resultado de invocar dicho método,
 siguiendo una estructura más restrictiva.
 
\end_layout

\begin_layout Plain Layout
Port: un punto de acceso definido como una combinación de ligadura y dirección
 de red.
 Dicha dirección de red es la dirección (URL) donde el servicio actúa, y
 por lo tanto, será la dirección a la que las aplicaciones deberán conectarse
 para acceder al servicio.
 
\end_layout

\begin_layout Plain Layout
Service: una colección de punto de acceso relacionados.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
WSDL 2.0
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Un documento WSDL versión 2.0 usa los siguientes elementos para la definición
 de los servicios:
\end_layout

\begin_layout Itemize

\emph on
Interface
\emph default
: describe una secuencia de mensajes que un servicio envía y/o recibe.
 Esto lo hace agrupando los mensajes relacionados en las operaciones.
 
\end_layout

\begin_layout Itemize

\emph on
Operation
\emph default
: es un conjunto de mensajes de entrada y salida.
 
\end_layout

\begin_layout Itemize

\emph on
Fault
\emph default
: provee un mecanismo para nombrar y describir un conjunto de errores que
 una interfaz puede generar.
 Esto permite a las operaciones identificar y reusar de manera sencilla
 los errores individuales que puedan generar.
\end_layout

\begin_layout Itemize

\emph on
Binding
\emph default
: describe concretamente el formato de mensajes que pueden ser usados.
 Es decir, define la implementación necesaria para acceder al servicio.
 
\end_layout

\begin_layout Itemize

\emph on
Type
\emph default
: define el contenido de mensajes y 
\emph on
faults
\emph default
, que se basan en un modelo de datos específico, y se expresan usando un
 lenguaje de esquema en particular (XSD).
 
\end_layout

\begin_layout Itemize

\emph on
Service
\emph default
: describe un conjunto de 
\emph on
endpoints
\emph default
 (URIs) para una implementación del servicio.
 Estos 
\emph on
endpoints 
\emph default
son lugares alternativos donde el servicio es provisto.
 
\end_layout

\begin_layout Paragraph
WADL
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Web Application Description Language (WADL)
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.w3.org/Submission/wadl/
\end_layout

\end_inset


\end_layout

\end_inset

 es una descripción XML entendible por máquina, utilizada en aplicaciones
 Web basadas en HTTP -- con un uso más orientado hacia los servicios REST.
 WADL es independiente de la plataforma y del lenguaje de programación que
 se quiera usar, y su objetivo es promover la reutilización de aplicaciones
 más allá del uso básico en un navegador Web.
 WADL es el equivalente de REST al lenguaje WSDL de SOAP y su aspecto distintivo
 es que los Servicios Web se describen mediante un conjunto de elementos
 
\emph on
resource
\emph default
 (recursos).
 El Listado de código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Ejemplo de Estructura WADL"

\end_inset

 muestra un ejemplo de la estructura de un documento WADL, donde se pueden
 desatacar los siguientes elementos:
\end_layout

\begin_layout Itemize
un elemento 
\emph on
resources
\emph default
 que actúa como contenedor de los recursos que provee el servicio.
\end_layout

\begin_layout Itemize
elementos
\emph on
 resource
\emph default
 que representan a cada uno de los recursos del servicio y contienen su
 descripción
\end_layout

\begin_layout Itemize
elementos 
\emph on
param
\emph default
 (parámetros) que describen las entradas 
\end_layout

\begin_layout Itemize
elementos 
\emph on
method
\emph default
 que describen la 
\emph on
request
\emph default
 y 
\emph on
response
\emph default
 del recurso
\end_layout

\begin_layout Itemize

\emph on
request
\emph default
: especifica cómo representar la entrada, qué tipos son requeridos y las
 cabeceras HTTP específicas que son requeridas
\end_layout

\begin_layout Itemize

\emph on
response
\emph default
 (respuesta) describe la representación de la respuesta del servicio, así
 como cualquier información de fallos, para hacer frente a errores.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listing/wadlExample.txt"
lstparams "caption={Ejemplo de Estructura WADL},label={Ejemplo de Estructura WADL}"

\end_inset


\end_layout

\begin_layout Paragraph
SoaML
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Standard
SoaML (
\emph on
Service-oriented architecture Modelling Language
\emph default
)
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.omg.org/spec/SoaML/1.0.1/PDF
\end_layout

\end_inset

 es un Perfil UML (
\emph on
Unified Modelling Language
\emph default
) de reciente desarrollo, que provee una manera estándar para definir la
 arquitectura y modelado de soluciones SOA.
 El Perfil SoaML permite crear un modelo de servicios como una derivación
 de un modelo de proceso de negocio.
 Un modelo de SoaML permite explorar y examinar los siguientes elementos:
 
\end_layout

\begin_layout Itemize
Servicios candidatos (conocidos como posibilidades en SoaML), que ayudan
 a priorizar los servicios que deben diseñarse e implementarse.
 
\end_layout

\begin_layout Itemize
Interfaces para servicios, que incluyen sus operaciones y las reglas, expectativ
as o restricciones relacionadas.
 
\end_layout

\begin_layout Itemize
Estructuras de datos, que se pasan como parámetros y se devuelven como resultado
s.
 
\end_layout

\begin_layout Itemize
Servicios atómicos, que muestran cómo deben ensamblarse los servicios para
 formar servicios compuestos.
\end_layout

\begin_layout Standard
El Perfil UML SoaML se enfoca en los conceptos básicos de SOA y en el modelado
 de servicios, incluyendo sus capacidades funcionales, aquellas que deberían
 proveer los consumidores de servicios, los protocolos o reglas para el
 uso de los servicios, y la información a intercambiar entre consumidores
 y proveedores de servicios.
 Además permite especificar cómo tales capacidades funcionales de servicios
 (requeridas/provistas) son consistentes con los protocolos de interacción
 de los mismos.
 Un ejemplo de diagrama SoaML es representado en la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-of-Passage"

\end_inset

.
 En la misma se muestra un modelo de negocios relacionado a la industria
 de barcos cargueros, en la cual hay organizaciones (
\emph on
dealer
\emph default
), estados del translado (
\emph on
Ship
\emph default
 
\emph on
Status
\emph default
), los encargados de la exportación (
\emph on
shipper
\emph default
), entre otros agentes.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter1/schema-of-passage.png
	lyxscale 30
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-of-Passage"

\end_inset

Diagrama de Modelo SoaML para industria de transporte marítimo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cada servicio definido en la arquitectura posee información específica de
 sí mismo que suele ser representada a través de un contrato de servicio
 (
\emph on
ServiceContract
\emph default
), donde se puede definir tanto la coreografía (interacción) de servicios
 como su contrato de invocación e interfaces \twohyphens
 esto último se muestra en
 la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-of-Passage-1-1"

\end_inset

 a través de un modelo de clases.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter1/messagesSoaMl.png
	lyxscale 50
	width 70col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-of-Passage-1-1"

\end_inset

Modelo de Diagrama SoaML
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
OpenAPI
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
OpenAPI (Swagger) 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://swagger.io/specification/v2/
\end_layout

\end_inset


\end_layout

\end_inset

 es un estándar de especificación libre de APIs de servicios, dirigida por
 la comunidad en conjunto con la Iniciativa OpenAPI, un proyecto colaborativo
 de la Fundación Linux.
 Diseñado en particular para servicios REST, permite que tanto los humanos
 como las computadoras descubran y entiendan las capacidades de un servicio
 sin requerir acceso al código fuente o documentación adicional.
 OpenAPI elimina las conjeturas a la hora de utilizar un servicio ya que
 define sus interfaces de manera completa y unívoca.
\end_layout

\begin_layout Standard
La descripción de la API se puede realizar bajo los protocolos JSON o YAML.
 Esta descripción se puede escribir manualmente, o generarla a partir de
 anotaciones en el código fuente de la API.
 Definirla manualmente permite validar y refinar la funcionalidad que la
 misma va a brindar y que tanto el desarrollo del servicio proveedor de
 la interfaz como de los servicios consumidores de la misma se puedan realizar
 en paralelo, agilizando esta etapa.
\end_layout

\begin_layout Standard
Siendo la misma API la que describe su propia estructura, es importante
 destacar que incorporar una especificación OpenAPI no requiere reescribir
 la API ya existente, no requiere vincular ningún software a un servicio;
 el servicio que se describe puede que ni siquiera sea propiedad del creador
 de la descripción.
\end_layout

\begin_layout Standard
Una especificación OpenAPI permite describir el comportamiento total de
 tu API, incluyendo:
\end_layout

\begin_layout Itemize

\emph on
Endpoints
\emph default
 disponibles (por ejemplo 
\family typewriter
/users
\family default
) y las operaciones sobre cada 
\emph on
endpoint
\emph default
 (
\family typewriter
GET /users
\family default
, 
\family typewriter
POST /users
\family default
).
\end_layout

\begin_layout Itemize
Parámetros de entrada y salida para cada operación.
\end_layout

\begin_layout Itemize
Métodos de autenticación.
\end_layout

\begin_layout Itemize
Información de contacto, licencia, términos de uso y otra información.
\end_layout

\begin_layout Standard
Las partes principales de la estructura de una especificación OpenAPI se
 encuentran representadas en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Estructura-de-Open-API"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter1/estructura OpenAPI.pdf
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Estructura-de-Open-API"

\end_inset

Estructura de una especificación OpenAPI.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Organización de la Tesis
\begin_inset CommandInset label
LatexCommand label
name "sec:organizacion"

\end_inset


\end_layout

\begin_layout Standard
A continuación se describe en forma sintética el contenido del resto de
 los capítulos que comprenden la estructura de esta Tesis:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Capítulo 2
\end_layout

\end_inset

 Se presenta la descripción general del enfoque existente de 
\emph on
Evaluación
\emph default
 y 
\emph on
Selección
\emph default
 de Servicios Web para asistir a un ingeniero de software en la construcción
 de Aplicaciones Orientadas a Servicios.
 Además, se presenta el metamodelo de descripción de servicios heterogéneos
 basado en estándares.
 
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Capítulo 3
\end_layout

\end_inset

 Se presenta la metodología de Razonamiento Basado en Casos aplicada al
 contexto de evaluación y selección de Servicios Web.
 Además, se detalla el diseño e implementación del componente conversor
 de descripciones OpenAPI para derivar instancias del metamodelo.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Capítulo 4
\end_layout

\end_inset

 Se presenta la evaluación experimental realizada a la herramienta de evaluación
 y selección de Servicios Web con CBR, en función de las extensiones desarrollad
as.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Capítulo 5
\end_layout

\end_inset

 Finalmente, se presentan las conclusiones del trabajo de tesis.
 Se identifican futuras líneas de acción basadas en los resultados obtenidos.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "Biblio_Lic"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
