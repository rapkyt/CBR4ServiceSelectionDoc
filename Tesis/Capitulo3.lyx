#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass myBook
\begin_preamble
\usepackage{url}
% Added by lyx2lyx
\renewcommand{\textendash}{--}
\renewcommand{\textemdash}{---}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package babel
\inputencoding auto
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Razonamiento Basado en Casos para Selección de Servicios
\begin_inset CommandInset label
LatexCommand label
name "chap:Proposal"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Como se mencionó en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Solución-propuesta"

\end_inset

 (Capítulo 1), el objetivo principal de este trabajo de tesis es definir
 e implementar un proceso de evaluación y selección de Servicios Web utilizando
 Razonamiento Basado en Casos (CBR).
 
\end_layout

\begin_layout Standard
Con el fin de alcanzar este objetivo, en primer lugar se define un paralelo
 entre el problema de descubrimiento, selección y evaluación de servicios
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "crasso2014easysoc,DeRenzis13"

\end_inset

, y los pasos de la metodología CBR (Recuperar, Reusar, Revisar y Retener).
 En este contexto, uno de los desafíos que surgen es contar con una especificaci
ón de contratos de servicios que sea a la vez descriptiva (en cuanto a las
 funcionalidades que ofrece cada Servicio Web) y además independiente de
 la tecnología.
 Para ello, el Metamodelo de descripciones de Servicios Web presentado en
 el Capítulo 2 fue extendido, incorporándolo en una nueva estructura llamada
 
\begin_inset Quotes eld
\end_inset

Caso
\begin_inset Quotes erd
\end_inset

.
 Además, se desarrolló un nuevo componente Conversor de especificaciones
 OpenAPI/Swagger
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Dado que el estándar OpenAPI surge de las especificaciones Swagger, usaremos
 ambos términos de manera análoga.
\end_layout

\end_inset

 hacia instancias del Metamodelo.
\end_layout

\begin_layout Standard
El resto del capítulo se organiza de la siguiente manera.
 La Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

 presenta un ejemplo ilustrativo que se utilizará a lo largo del capítulo.
 La Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CBR-para-selección"

\end_inset

 presenta nuestra propuesta de CBR para selección de Servicios Web utilizando
 el Metamodelo propuesto.
 Finalmente, la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:-Conversor de OAS"

\end_inset

 se detalla el Componente Conversor de Swagger para instanciar el Metamodelo
 de Servicios Web.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Ejemplo-Ilustrativo"

\end_inset

Ejemplo Ilustrativo
\end_layout

\begin_layout Standard
Durante el desarrollo de este capítulo se tomará como soporte a la explicación,
 un Servicio Web REST perteneciente al dominio de veterinaria (
\emph on
PetStore
\emph default
).
 Este servicio nos brinda la posibilidad de realizar altas, bajas y consulta
 de las mascotas cargadas en el sistema, como así también cargar imágenes
 de las mismas.
 El diagrama de clases UML para este dominio es presentado en la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: caso de estudio-1"

\end_inset

 en donde se referencia las operaciones con el formato 
\emph on
{Método HTTP}_{URI}
\emph default
 para que puedan ser identificadas unívocamente.
 Además se encapsulan los parámetros de entrada por URL con llaves, por
 ejemplo, 
\emph on
{petId}, 
\emph default
se reemplazará por el 
\emph on
id
\emph default
 de la mascota deseada.
\end_layout

\begin_layout Standard
Este servicio está compuesto por cinco operaciones encapsuladas en la interfaz
 
\emph on
petStore
\emph default
: 
\emph on
POST_/pet, GET_/pet/{petId}, POST_/pet/{petId}, DELETE_/pet/{petId} y POST_/pet/
{petId}/uploadImage
\emph default
.
 La operación 
\emph on
POST_/pet
\emph default
 es utilizada para agregar mascotas a la base de datos, devolviendo los
 datos de la misma, y un id único.
 Para 
\emph on
GET_/pet/{petId}
\emph default
, dado un id 
\emph on

\begin_inset Quotes eld
\end_inset

petId
\begin_inset Quotes erd
\end_inset


\emph default
 de una mascota, retorna su información, a su vez 
\emph on
POST_/pet/{petId} 
\emph default
recibe el id de la mascota, más los datos a actualizar de la misma, 
\emph on
DELETE_/pet/{petId}
\emph default
 recibe el id de una mascota y luego la elimina.
 Finalmente, 
\emph on
POST_/pet/{petId}/uploadImage
\emph default
 es una operación que recibe el id de una mascota y una imagen, almacena
 la imagen y agrega la 
\emph on
URL
\emph default
 de la misma a la propiedad 
\emph on
photoUrls
\emph default
 de la mascota con el mismo id.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter3/usadas/OAS vs Metamodelo.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: caso de estudio-1"

\end_inset

Visión esquemática UML del Caso de estudio 
\emph on
PetStore.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:CBR-para-selección"

\end_inset

Razonamiento Basado en Casos para selección de Servicios Web
\end_layout

\begin_layout Standard
En esta sección se describe cada 
\emph on
paso
\emph default
 del proceso de CBR para Selección de Servicios Web, de acuerdo al diagrama
 de la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

.
 El mismo comienza cuando se ingresa al sistema una consulta o nuevo caso
 (
\emph on
New Case
\emph default
), con 
\emph on
problema
\emph default
 y sin 
\emph on
solución
\emph default
 \twohyphens
 especificada de acuerdo al metamodelo definido en el Paso 1.
 Considerando que la base de conocimiento (
\emph on
Knowledge Base
\emph default
) fue populada previamente a la consulta (Paso 2), se compara la misma uno
 a uno con los casos almacenados (Paso 3), los cuales poseen tanto 
\emph on
problema
\emph default
 como 
\emph on
solución
\emph default
.
 Se calcula cuán distinto es el problema del nuevo 
\emph on
caso
\emph default
 con cada uno de los demás problemas, para esto se utiliza la función de
 distancia basada en el 
\emph on
Metamodelo
\emph default
,
\emph on
 
\emph default
la cual se detalla en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Similitud-de-casos"

\end_inset


\emph on
.
 
\emph default
La distancia entre dos casos nos indica cuán parecidas son sus partes problema,
 y el esfuerzo que va a requerir integrarlas, en términos de la complejidad
 de los artefactos de adaptación
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "GoF"

\end_inset

.
 
\end_layout

\begin_layout Standard
Para seleccionar el servicio adecuado entre los candidatos potencialmente
 compatibles, se utilizan métodos de selección configurables, como 
\emph on
K-nn, WK-nn
\emph default
 y 
\emph on
DWK-nn
\emph default
.
 
\emph on
K-nn 
\emph default
consiste en tomar las 
\emph on
K
\emph default
 soluciones de los casos con menor distancia y seleccionar la más frecuente
 (puesto que dos casos en la base de conocimiento pueden tener la misma
 solución).
 En caso de empate se elige la solución del caso con menor distancia.
 La misma pasa a ser la solución 
\emph on
ganadora
\emph default
 y es asignada al caso candidato (ahora 
\emph on
Solved Case
\emph default
) (Paso 4).
 Los métodos de selección 
\emph on
WK-nn
\emph default
 y 
\emph on
DWK-nn
\emph default
 son más complejos y se desarrollan en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "par:Resolviendo-el-Caso"

\end_inset

.
 El caso candidato se presenta al usuario y éste decide si la solución es
 compatible o no, en caso de que no lo sea, dicha solución es descartada
 y el usuario puede volver a iniciar el proceso con una consulta refinada
 en base a la información obtenida.
 
\end_layout

\begin_layout Standard
Si la solución es compatible (Paso 5), se evalúa la calidad de la respuesta,
 para esto se compara con un valor de umbral (
\emph on
threshold
\emph default
): si la distancia de la solución tiene un valor mayor que el 
\emph on
threshold
\emph default
 establecido, el nuevo caso con su solución son agregados a la base de conocimie
nto y, de esta manera, es tomada en cuenta para futuras consultas.
 En caso de que el valor sea menor que el establecido, este caso no se agrega,
 debido a que generaría ruido y posiblemente haría 
\emph on
overfitting 
\emph default
(sobreajuste) al proceso.
 Esto generaría falsos positivos para los futuros casos, dado que se indicaría
 que no hay distancia entre el caso requerido y la solución de un caso de
 la base de conocimiento, cuando en realidad existe una distancia significativa.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ImgChapter3/usadas/CBR 4SS.png
	lyxscale 70
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Esquema-de-proceso"

\end_inset

Esquema de proceso propuesto
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Representación del Caso
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Como primer paso (Paso 1 Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

), es esencial definir como está compuesto un Caso a resolver, el mismo
 consta con dos atributos principales, 
\emph on
problema
\emph default
 y 
\emph on
solución
\emph default
.
 El problema es una referencia a una instancia de la clase 
\emph on
Interface
\emph default
 del 
\emph on
Metamodelo
\emph default
, de este modo, el 
\emph on
problema
\emph default
 es una representación de la especificación técnica del servicio que se
 desea resolver o ha sido resuelto previamente.
 La 
\emph on
solución
\emph default
 es un atributo, que en los casos a resolver será 
\emph on
nulo
\emph default
, pues el caso no está resuelto, y que en caso contrario tendrá como valor
 un 
\emph on
String 
\emph default
indicando la 
\emph on
ubicación 
\emph default
de la solución para dicho caso, éste puede ser el URI correspondiente al
 Servicio Web detallado en el problema, más otra información relevante como
 el nombre del servicio o especificaciones técnicas.
\end_layout

\begin_layout Standard
Un 
\emph on
Caso
\emph default
 sin solución va a ser introducido en nuestro CBR para obtener un nuevo
 
\emph on
Caso
\emph default
 con la solución más próxima que satisfaga las necesidades del problema.
 En la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EjemploVersionCaseInstanciada"

\end_inset

, podemos observar el diagrama de clases instanciado para la representación
 de un 
\emph on
Caso 
\emph default
cuyo problema es la interfaz 
\emph on
PetStore 
\emph default
definida en el ejemplo (Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

).
 El problema contiene cinco operaciones, a modo ilustrativo sólo se muestra
 la operación 
\emph on
GET_/pet/{petId}
\emph default
 hasta llegar a los 
\emph on
tipos 
\emph default
utilizados
\emph on
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter3/usadas/OAS vs Metamodelo (instancia Case).png
	lyxscale 80
	width 100col%
	scaleBeforeRotation

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:EjemploVersionCaseInstanciada"

\end_inset

Ejemplo de 
\emph on
Caso
\emph default
 instanciado para el caso de estudio 
\emph on
PetStore
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Base de conocimiento
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Para el Razonamiento Basado en Casos es de suma importancia poseer una base
 de conocimiento relevante (Paso 2, Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

), pues justamente, es utilizada para buscar el mejor caso candidato entre
 los casos previamente aprendidos.
 Esta base de conocimiento o 
\emph on
KB
\emph default
 debe ser persistente entre distintas ejecuciones del 
\emph on
CBR
\emph default
, de otra manera, no se dispondrán de los casos aprendidos en ejecuciones
 pasadas.
 Inicialmente, se puede popular la KB con servicios reales obtenidos de
 la Web
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://apis.guru/openapi-directory
\end_layout

\end_inset


\end_layout

\end_inset

.
 Para ello se itera sobre estos servicios y, con la especificación de cada
 uno, se genera una instancia del metamodelo, se toma la 
\emph on
interface
\emph default
 de esta instancia, y junto con la URL donde se encuentra actualmente el
 servicio se compone un nuevo caso con este par problema y solución respectivame
nte, luego este caso es cargado en la base de conocimiento.
 De esta manera, el CBR posee una base de conocimiento inicial, con la cual
 comenzar la comparación e ir incorporando nuevos casos según sea necesario.
\end_layout

\begin_layout Standard
Para el almacenamiento de esta base de conocimientos se decidió utilizar
 una base de datos 
\emph on
no-sql
\emph default
 basada en documentos (no relacional) llamada MongoDB
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.mongodb.com/what-is-mongodb
\end_layout

\end_inset


\end_layout

\end_inset

.
 MongoDB es un Sistema Gestor de Bases de Datos (SGBD) Open Source, orientado
 a Documentos, Es ampliamente utilizado en el mercado, posicionándose dentro
 de los 10 SGBD mas utilizados, independientemente del tipo
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://db-engines.com/en/ranking
\end_layout

\end_inset


\end_layout

\end_inset

 y en el primer puesto dentro de las de su tipo
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://db-engines.com/en/ranking/document+store
\end_layout

\end_inset


\end_layout

\end_inset

.
 Se decidió utilizar MongoDB debido a las siguientes ventajas: 
\end_layout

\begin_layout Itemize
Es el estándar 
\emph on
de facto
\emph default
 en cuanto a SGBD basados en documentos, es Open Source, y posee una amplia
 documentación
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.mongodb.com/manual
\end_layout

\end_inset


\end_layout

\end_inset

.
 Además, es gratuito incluso su última versión, lo cual no sucede para otros
 SGBD (e.g., 
\emph on
Couchbase
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.couchbase.com/
\end_layout

\end_inset


\end_layout

\end_inset

).
\end_layout

\begin_layout Itemize
El 
\emph on
Caso
\emph default
 que se desea almacenar se puede representar como un sólo documento, u objeto
 JSON
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.json.org/
\end_layout

\end_inset


\end_layout

\end_inset

: el mismo formato que se utiliza en las especificaciones Swagger.
\end_layout

\begin_layout Itemize
Salvo las instancias de las clases 
\emph on
SimpleType
\emph default
, 
\emph on
ComplexType 
\emph default
y 
\emph on
ArrayType
\emph default
, no vamos a tener otras instancias idénticas entre sí, por lo cual la ventaja
 de un modelo relacional (con claves foráneas que permitan referenciar sin
 repetir) queda reducida a esas clases.
 
\end_layout

\begin_layout Itemize
La eficiencia para nuestra aplicación es mucho mayor.
 A la hora de consultar un caso siempre lo realizaremos desde la raíz del
 mismo, y para decidir si es o no compatible tenemos que explorar todas
 las relaciones.
 Si utilizáramos una base de datos relacional, cada consulta se traduciría
 en el acceso a todas las 
\begin_inset Quotes eld
\end_inset

tablas
\begin_inset Quotes erd
\end_inset

 (al menos once consultas o 
\emph on
hits
\emph default
 a la base de datos).
 Sin embargo, en una base de datos orientada a documentos, por cada caso
 que deseamos comparar con el caso de entrada realizaremos una sola consulta
 o 
\emph on
hit
\emph default
 a la base de datos, para una mayor eficiencia.
\end_layout

\begin_layout Standard
Por otro lado, una común desventaja que presentan los sistemas de base de
 datos 
\emph on
no-sql
\emph default
 frente a uno relacional, es que no puede asegurar las propiedades ACID
 (
\emph on
Atomicity, Consistency, Isolation, Durability
\emph default
) en un bloque transaccional.
 Sin embargo, MongoDB asegura la transaccionalidad a nivel documento.
 Así, como todas las operaciones en el SGBD realizadas en nuestro enfoque
 no tienen bloques transaccionales, ésta no es una desventaja para nuestro
 enfoque.
 Por otro lado, la versión 4.0 de MongoDB asegura incluir bloques transaccionales
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.mongodb.com/transactions
\end_layout

\end_inset


\end_layout

\end_inset

 donde se respetan las propiedades ACID.
 Por lo cual, si en un futuro fuera necesario actualizar más de un documento
 simultáneamente asegurando estas propiedades, sólo habría que actualizar
 la versión de MongoDB.
\end_layout

\begin_layout Standard
En el Listado
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Documento PetStore almacenado en MongoDB"

\end_inset

 se puede observar, para el ejemplo 
\emph on
PetStore
\emph default
 (Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

), un fragmento de objeto JSON conteniendo un 
\emph on
Caso
\emph default
 cuyo 
\emph on
problema
\emph default
 es la instancia del Metamodelo correspondiente a la especificación ilustrada.
 Dicho objeto JSON es almacenado bajo el mismo formato en la Base de Conocimient
o 
\emph on
KB
\emph default
 en el Sistema Gestor de Base de Datos MongoDB.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listing/petStore(mongo) (short).txt"
lstparams "breaklines=true,basicstyle={\\ttfamily\\scriptsize},caption={Documento PetStore almacenado en MongoDB},label={Documento PetStore almacenado en MongoDB}"

\end_inset


\end_layout

\begin_layout Subsection
Búsqueda de casos similares (Recuperar)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
A continuación, para obtener una solución a un 
\emph on
Nuevo Caso
\emph default
 (Paso 3, Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

), se debe calcular la función de similitud (DIST), como la distancia entre
 el 
\emph on
Nuevo Caso 
\emph default
y cada caso perteneciente a la base de conocimientos 
\emph on
KB
\emph default
, de acuerdo a la Fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:DIST"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
DIST(C^{N},C^{C})=\sum_{1}^{n}(w_{i}*sim_{i}(C_{i}^{N},C_{i}^{C}))\label{eq:DIST}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
Donde 
\begin_inset Formula $C^{N}$
\end_inset

 es el nuevo 
\emph on
Caso 
\emph default
a evaluar y 
\begin_inset Formula $C^{C}$
\end_inset

 es el 
\emph on
Caso 
\emph default
candidato obtenido de la base de conocimientos 
\emph on
KB
\emph default
.
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por cada atributo en la representación del caso definimos funciones de similitud
 específicas 
\begin_inset Formula $sim_{i}$
\end_inset

 y pesos 
\begin_inset Formula $w_{i}$
\end_inset

 que serán detalladas en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Similitud-de-casos"

\end_inset

.
 Para calcularlas, se comparan los nombres de los servicios, cantidad de
 operaciones de los mismos y luego se compara operación por operación la
 similitud de parámetros de entrada y salida, a nivel sintáctico y semántico.
\end_layout

\begin_layout Standard
Si tomamos como 
\emph on
Caso
\emph default
 a evaluar el ejemplo 
\emph on
PetStore
\emph default
 (Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

) y como 
\emph on
Caso
\emph default
 candidato hipotético el 
\emph on
PetStoreFull
\emph default
 especificado en la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: UML-CasoCandidatoPetStoreFull"

\end_inset

, al aplicar la función de distancia nos da un valor de
\begin_inset space ~
\end_inset


\begin_inset Formula $0.153333$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter3/usadas/UML PetStoreFull.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: UML-CasoCandidatoPetStoreFull"

\end_inset

Visión esquemática UML del Caso candidato 
\emph on
PetStoreFull
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "par:Resolviendo-el-Caso"

\end_inset

Resolviendo el Caso (Reusar y Revisar)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Una vez calculadas las distancias de cada uno de los casos candidatos con
 respecto al nuevo 
\emph on
Caso
\emph default
 (Paso
\begin_inset space ~
\end_inset

4, Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

), las mismas son introducidas en una lista a modo de tupla 
\begin_inset Formula $(Solución,\,Distancia)$
\end_inset

, luego esta lista es ordenada según la distancia y utilizada con el fin
 de encontrar el Caso Candidato final.
\end_layout

\begin_layout Standard
Las estrategias para la selección de éste Caso Candidato final entre la
 lista de casos candidatos son 
\emph on
1-nn
\emph default
, 
\emph on
K-nn
\emph default
, 
\emph on
WK-nn
\emph default
 y 
\emph on
DWK-nn
\emph default
.
\end_layout

\begin_layout Itemize

\emph on
1-nn
\emph default
 Consiste en simplemente seleccionar la 
\emph on
Solución
\emph default
 cuya 
\emph on
distancia
\emph default
 sea la menor.
\end_layout

\begin_layout Itemize

\emph on
k-nn 
\emph default
Consiste en tomar las 
\emph on
k 
\emph default
soluciones con menor distancia y tomar la 
\emph on
Solución
\emph default
 más frecuente entre las mismas; en caso de empate se toma la 
\emph on
Solución
\emph default
 cuya distancia sea la menor.
\end_layout

\begin_layout Itemize

\emph on
WK-nn
\emph default
 
\emph on
(Weighted k-NN) 
\emph default
y
\emph on
 DWK-nn
\emph default
 
\emph on
(Distance-weighted knn) 
\emph default
consisten en tomar las 
\emph on
k
\emph default
 soluciones con menor distancia, ponderar el peso de cada solución con la
 fórmula 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:WKNN"

\end_inset

 ó 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:DWKNN"

\end_inset

 respectivamente, agrupar las mismas por solución sumando el peso ponderado
 de cada una y tomar la 
\emph on
Solución
\emph default
 con mayor peso.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
w(i)=\frac{d^{k}-d^{i}}{d^{k}-d^{1}}\label{eq:WKNN}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
w(i)=\frac{d^{k}-d^{i}}{d^{k}-d^{1}}\times\frac{d^{k}+d^{1}}{d^{k}+d^{i}}\label{eq:DWKNN}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
Donde 
\begin_inset Formula $d^{k}$
\end_inset

 es la distancia de la solución en la posición 
\emph on
k
\emph default
, 
\begin_inset Formula $d^{1}$
\end_inset

 es la distancia de la solución con menor distancia y 
\begin_inset Formula $d^{i}$
\end_inset

 es la distancia en la posición a calcular el peso
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La elección tanto de la estrategia a utilizar, así como del valor de 
\emph on
K 
\emph default
se realiza por medio de la configuración de variables de entorno a la hora
 de ejecutar el algoritmo de CBR.
\end_layout

\begin_layout Standard
Una vez que se obtiene el Caso Candidato final mediante la estrategia selecciona
da, se toma la 
\emph on
solución 
\emph default
del mismo, y se devuelve para su aprobación final, con un eventual paso
 de 
\emph on
feedback
\emph default
 o ponderación manual.
 Además, en CBR se puede realizar una adaptación de la solución para que
 concuerde con el problema ingresado.
 En este dominio, esta adaptación se realiza de forma manual por el desarrollado
r que busca una solución a su problema.
 Él mismo deberá realizar los cambios necesarios en su interfaz para que
 sea compatible con la interfaz de la solución brindada.
 La adaptación automática de 
\emph on
Casos
\emph default
 es un proceso complejo que se encuentra fuera del alcance de esta tesis,
 y se propone como trabajo a futuro.
\end_layout

\begin_layout Standard
Si tomamos como 
\emph on
Caso
\emph default
 a evaluar el ejemplo 
\emph on
PetStore
\emph default
 indicado en
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

, primer 
\emph on
Caso
\emph default
 candidato 
\emph on
PetStoreFull
\emph default
 con una distancia de 
\begin_inset Formula $0.153333$
\end_inset

, e hipotéticamente otro 
\emph on
Caso
\emph default
 candidato 
\emph on
ClickMeter
\emph default
 y dos casos más cuya solución es 
\emph on
MoneyTransfer
\emph default
 con distancias de 
\begin_inset Formula $0.8365$
\end_inset

, 
\begin_inset Formula $0.985$
\end_inset

 y 
\begin_inset Formula $1.53$
\end_inset

 respectivamente las estrategias se comportarían de la siguiente manera:
\end_layout

\begin_layout Itemize

\series bold
1-nn
\series default
 Seleccionaría 
\emph on
PetStoreFull
\emph default
, pues es la solución que posee menor distancia.
\end_layout

\begin_layout Itemize

\series bold
k-nn
\series default
\emph on
 
\emph default
con 
\emph on
k
\emph default
<4 Seleccionaría 
\emph on
PetStoreFull
\emph default
, puesto que cada solución de los 
\emph on
k
\emph default
 casos de menor distancia tiene una frecuencia igual a uno, por lo tanto,
 debido al empate, se toma la solución del caso cuya distancia sea la menor.
\end_layout

\begin_layout Itemize

\series bold
k-nn
\series default
 con 
\emph on
k
\emph default
>=4 Seleccionaría 
\emph on
MoneyTransfer
\emph default
, puesto que dentro de los cuatro casos de menor distancia, la misma es
 solución en dos de ellos.
\end_layout

\begin_layout Itemize

\series bold
WK-nn
\series default
 Seleccionaría 
\emph on
PetStoreFull
\emph default
 ya que es la solución con mayor peso ponderado según la fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:WKNN"

\end_inset

, donde los pesos ponderados de cada solución son: 
\begin_inset Formula $w(PetStoreFull)=1$
\end_inset

, 
\begin_inset Formula $w(ClickMeter)=0.5737$
\end_inset

 y 
\begin_inset Formula $w(MoneyTransfer)=0.3959$
\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
DWK-nn
\series default
\emph on
 
\emph default
Seleccionaría 
\emph on
PetStoreFull
\emph default
 ya que es la solución con mayor peso ponderado según la fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:DWKNN"

\end_inset

, donde los pesos ponderados de cada solución son: 
\begin_inset Formula $w(PetStoreFull)=1$
\end_inset

, 
\begin_inset Formula $w(ClickMeter)=0.3583$
\end_inset

 y 
\begin_inset Formula $w(MoneyTransfer)=0.265$
\end_inset

.
\end_layout

\begin_layout Subsection
Evaluar (Retener)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En esta instancia (Paso 5, Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

), el 
\emph on
Razonador Basado en Casos 
\emph default
ya comparó el caso de entrada con el problema de cada uno de los casos en
 la base de conocimientos (KB) y, se espera, haya encontrado una solución
 al mismo en términos de la similitud de atributos vista anteriormente.
 Esta solución fue revisada y marcada como válida por el usuario experto,
 es decir, es una solución válida y el problema introducido, junto con la
 solución, pasan a ser un 
\emph on
caso probado
\emph default
.
 
\end_layout

\begin_layout Standard
El siguiente paso consiste en tomar la decisión respecto a si este caso
 probado será añadido a la base de conocimientos.
 Por un lado, retener demasiados casos puede generar ruido en la evaluación,
 disminuyendo la performance del razonador a largo plazo.
 Por otro lado, si no se agregan casos nuevos, no hay aprendizaje, y el
 razonador no será capaz de resolver correctamente nuevos casos.
 Para prevenir que esto suceda se define un valor de 
\emph on
threshold
\emph default
 
\emph on
(th)
\emph default
 o umbral
\emph on
 
\emph default
sobre la función de distancia 
\emph on
(DIST)
\emph default
.
 Dicho valor de umbral determina si el nuevo caso es retenido (
\emph on
caso aprendido
\emph default
) en la 
\emph on
KB
\emph default
.
 Si el valor de la distancia es menor que el valor de 
\emph on
threshold
\emph default
, entonces el caso es agregado a la base de conocimientos como un caso relevante
, de otro modo es descartado.
 El objetivo es prevenir el crecimiento incontrolable de la 
\emph on
KB,
\emph default
 y al mismo tiempo, mejorar la performance del razonador.
 El valor de 
\emph on
threshold
\emph default
 o umbral es una constante que se configura al ejecutar el algoritmo, la
 misma debería tomar valores distintos dependiendo de la cantidad de casos
 iniciales.
 Si la cantidad es baja, se debería utilizar un valor alto, permitiendo
 que el razonador añada casos para enriquecer la KB.
 Si el número de casos crece en un momento determinado, el valor de 
\emph on
threshold 
\emph default
puede ser disminuido para agregar sólo casos relevantes.
\end_layout

\begin_layout Standard
Suponiendo un valor de 
\emph on
threshold
\emph default
 de 
\begin_inset Formula $1.0$
\end_inset

, si tomamos como 
\emph on
Caso probado
\emph default
 a 
\emph on
PetStore
\emph default
, definido en
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

, cuya solución es 
\emph on
PetStoreFull
\emph default
 con una distancia de 
\begin_inset Formula $0.153333$
\end_inset

, el mismo será agregado a nuestra base de conocimientos para experimentos
 futuros.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Similitud-de-casos"

\end_inset

Similitud de casos
\end_layout

\begin_layout Standard
A continuación explicaremos en detalle como se evalúa, para cada atributo,
 la función de similitud 
\begin_inset Formula $sim$
\end_inset

 presentada en la Fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:DIST"

\end_inset

.
\end_layout

\begin_layout Paragraph
Nombre de servicios
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La evaluación de los 
\emph on
nombres de servicios
\emph default
 consiste en comparar el atributo 
\emph on
nombre
\emph default
 entre el problema del 
\emph on
Caso candidato
\emph default
 y el del problema del 
\emph on
Caso
\emph default
 a evaluar.
 Esta similitud va a ser calculada utilizando el algoritmo para los 
\emph on
Identificadores
\emph default
 (Fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:sim-nombre-de-servicio"

\end_inset

), que considera la semántica en término de identificadores, la misma tiene
 en cuenta los exactos, sinónimos, hipónimos e hiperónimos
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "castro16"

\end_inset

.
\end_layout

\begin_layout Standard
El peso 
\begin_inset Formula $w$
\end_inset

 que se le da al atributo 
\emph on
Nombre de servicios
\emph default
 es bajo (
\begin_inset Formula $w=0.1$
\end_inset

), puesto a que no expresa de manera directa aspectos funcionales.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
sim(Id^{N},Id^{C})=\frac{exact+sin+0.5*(hipo+hiper)}{terms-sin}\label{eq:sim-nombre-de-servicio}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Cantidad de Operaciones
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La evaluación de 
\emph on
Cantidad de operaciones
\emph default
 consiste en comparar el valor numérico de tal atributo entre el problema
 del 
\emph on
Caso candidato
\emph default
 y el problema del 
\emph on
Caso
\emph default
 a evaluar.
 La Similitud es calculada de acuerdo a la Fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:sim-cantidad-operaciones"

\end_inset

.
 Los Casos candidatos en la base de conocimiento KB con menos operaciones
 que la funcionalidad requerida (problema) son consideradas como potencialmente
 incompatibles, siendo penalizados como posibles soluciones.
 El peso 
\begin_inset Formula $w$
\end_inset

 que se le asigna al atributo 
\emph on
Cantidad de operaciones
\emph default
 es alto (
\begin_inset Formula $w=0.3$
\end_inset

) puesto que expresa de manera directa aspectos funcionales (i.e., el número
 de operaciones requeridas).
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
sim(\#op^{N},\#op^{C})=\begin{cases}
\#op^{N}<=\#op^{C} & 1\\
Sino & 0
\end{cases}\label{eq:sim-cantidad-operaciones}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
Donde 
\begin_inset Formula $\#op^{N}$
\end_inset

 y 
\begin_inset Formula $\#op^{C}$
\end_inset

 son los valores de los atributos 
\emph on
cantidad de operaciones
\emph default
 para el 
\emph on
Caso
\emph default
 a evaluar y el 
\emph on
Caso candidato
\emph default
 de la KB respectivamente
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Operaciones
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La evaluación de Operaciones consiste en evaluar las similitudes de este
 complejo atributo entre el 
\emph on
problema
\emph default
 del 
\emph on
Caso candidato
\emph default
 y el 
\emph on
problema
\emph default
 del 
\emph on
Caso
\emph default
 a evaluar.
\end_layout

\begin_layout Standard
La evaluación de similitud entre operaciones considera los aspectos semánticos
 y estructurales que surgen de las definiciones de la operación.
 Los aspectos estructurales implican la equivalencia de tipos de datos (subtipif
icación), mientras que los aspectos semánticos implican conceptos de términos
 e identificadores.
\end_layout

\begin_layout Standard
Esta similitud se calcula de acuerdo a la Fórmula
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:sim-operaciones"

\end_inset

, el cálculo de similitud de elementos de signatura (
\begin_inset Formula $Retorno+Nombre+Parámetros$
\end_inset

) se detalló oportunamente en las Fórmulas
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:nameComp"

\end_inset

,
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:compParam"

\end_inset

 y
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:compRetComplejo"

\end_inset

 (Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Condiciones-de-Equivalencia"

\end_inset

, Capítulo
\begin_inset space ~
\end_inset

2).
\end_layout

\begin_layout Standard
Puesto que el criterio principal de nuestro enfoque en la selección de servicios
 es la similitud funcional, el peso 
\begin_inset Formula $w$
\end_inset

 que se le asigna al atributo 
\emph on
Operaciones
\emph default
 es el mayor (
\begin_inset Formula $w=0.6$
\end_inset

) y la función de similitud 
\begin_inset Formula $sim$
\end_inset

 es la más compleja de este 
\emph on
Razonador Basado en Casos
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
sim(C^{N},C^{C})={\displaystyle \sum_{1}^{n}}\frac{(Max(simOp(op_{i}^{N},C^{C}))}{n}\label{eq:sim-operaciones}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
Donde 
\begin_inset Formula $n$
\end_inset

 es el número de operaciones en 
\begin_inset Formula $C^{C}$
\end_inset

 y 
\begin_inset Formula $simOp$
\end_inset

 es el mejor valor de equivalencia 
\begin_inset Formula $simOpValue(op_{i}^{C},op_{j}^{C})$
\end_inset

 para todo 
\begin_inset Formula $op_{j}^{C}$
\end_inset

 en 
\begin_inset Formula $C^{C}$
\end_inset

 
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El valor de similitud entre operaciones (
\begin_inset Formula $simOpValue$
\end_inset

) entre una operación 
\begin_inset Formula $op^{N}$
\end_inset

 y una operación potencialmente compatible 
\begin_inset Formula $op^{C}$
\end_inset

 es calculada de acuerdo a la Fórmula 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:sim-operacionesValue"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
simOpValue(op^{N},op^{C})=Ret+Nombre+Par\label{eq:sim-operacionesValue}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size small
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:-Conversor de OAS"

\end_inset

Conversor Swagger para instanciar el Metamodelo de Servicios Web
\end_layout

\begin_layout Standard
Como se mencionó anteriormente, es necesario un componente conversor para
 aceptar especificaciones de entrada en formatos distintos a WSDL.
 Para ello, se realizaron algunos ajustes al metamodelo según la metodología
 CBR, detallados en la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Cambios-necesarios"

\end_inset

.
 En la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Relación-entre-OAS"

\end_inset

 se analiza la relación existente entre el estándar Swagger y el metamodelo,
 utilizando como soporte un caso de estudio.
 En la Sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Construcción-del-instanciador"

\end_inset

, se explica como se construyó el componente Conversor del metamodelo propuesto,
 detallando las estructuras de datos y el proceso de análisis que se realiza
 para poder instanciar el metamodelo a partir de una descripción swagger.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Cambios-necesarios"

\end_inset

Cambios necesarios al metamodelo
\end_layout

\begin_layout Standard
En el diagrama de la Figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-de-proceso"

\end_inset

 se puede observar dentro del cuadro con bordes punteados como se componen
 las clases pertenecientes al Metamodelo.
 El mismo cumple su función como descriptor de interfaces, pero no tiene
 toda la información necesaria para operar dentro del contexto de un CBR.
 
\end_layout

\begin_layout Standard
Luego, fueron necesarios algunos cambios que consisten principalmente en
 la creación de una nueva clase contenedora llamada 
\emph on
Case
\emph default
, la misma posee un atributo llamado 
\emph on
problem
\emph default
, referenciando a la 
\emph on
Interface 
\emph default
descriptora del servicio, y otro atributo nombrado 
\emph on
solution
\emph default
, siendo éste un 
\emph on
String 
\emph default
que referencia unívocamente la solución del problema descripto, el mismo
 puede ser cadena nula si se trata de un nuevo caso a consultar.
\end_layout

\begin_layout Standard
Para poder almacenar nuestro caso en la KB serializado, se optó por utilizar
 la librería 
\emph on
Jackson
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/FasterXML/jackson-module-kotlin
\end_layout

\end_inset


\end_layout

\end_inset

, que es el estándar 
\emph on
de facto
\emph default
 para realizar dichas tareas en Java/Kotlin.
 Debido a que 
\emph on
Parameter
\emph default
 referencia al tipo de dato abstracto 
\emph on
Type
\emph default
, al momento de des-serializarlo es necesario especificar a qué clase concreta
 pertenece el dato en cuestión, para esto fue necesario modificar los constructo
res de la clase 
\emph on
Type
\emph default
, añadiendo anotaciones (
\emph on
Annotations
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.oracle.com/javase/7/docs/technotes/guides/language/annotations.html
\end_layout

\end_inset


\end_layout

\end_inset

)
\emph on
 
\emph default
a los mismos, siguiendo el patrón 
\emph on
Decorator
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "GoF"

\end_inset

.
 Con estos cambios fue posible la utilización del Metamodelo SoaML dentro
 del contexto de CBR.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Relación-entre-OAS"

\end_inset

Relación entre Swagger y Metamodelo
\end_layout

\begin_layout Standard
Aquí se detalla la correlación entre el estándar Swagger y el Metamodelo
 de Servicios Web, para lo cual se utilizará el caso de estudio de 
\emph on
PetStore
\emph default
 como soporte a la explicación.
 En el Listado de Código 
\begin_inset CommandInset ref
LatexCommand ref
reference "Documento OAS PetStore"

\end_inset

 se muestra un fragmento de la especificación swagger que describe el servicio
 
\emph on
PetStore
\emph default
 descripto en 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Ejemplo-Ilustrativo"

\end_inset

, en el mismo se han eliminado las operaciones que no se utilizan para explicar
 la relación entre la especificación Swagger y el Metamodelo.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
LISTADOS DE código, palabra 
\begin_inset Quotes eld
\end_inset

algoritmo
\begin_inset Quotes erd
\end_inset

, el listado de mongo a un apéndice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listing/petStore (ejemplo).txt"
lstparams "breaklines=true,basicstyle={\\ttfamily\\scriptsize},caption={Documento Swagger de PetStore},label={Documento OAS PetStore},label={Documento OAS PetStore-1}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
floatname{algorithm}{Procedure}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,numberstyle={\scriptsize},basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "swagger": "2.0",
\end_layout

\begin_layout Plain Layout

  "info": {
\end_layout

\begin_layout Plain Layout

    "version": "1.0.0",
\end_layout

\begin_layout Plain Layout

    "title": "Swagger Petstore",
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

  "paths": {
\end_layout

\begin_layout Plain Layout

    "/pet": {
\end_layout

\begin_layout Plain Layout

      "post": {...}
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "/pet/{petId}": {
\end_layout

\begin_layout Plain Layout

      "get": {
\end_layout

\begin_layout Plain Layout

        "description": "Find and returns a single pet by petId",
\end_layout

\begin_layout Plain Layout

        "produces": [
\end_layout

\begin_layout Plain Layout

          "application/json"
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        "parameters": [
\end_layout

\begin_layout Plain Layout

          {
\end_layout

\begin_layout Plain Layout

            "name": "petId",
\end_layout

\begin_layout Plain Layout

            "in": "path",
\end_layout

\begin_layout Plain Layout

            "description": "ID of pet to return",
\end_layout

\begin_layout Plain Layout

            "required": true,
\end_layout

\begin_layout Plain Layout

            "type": "integer"
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        "responses": {
\end_layout

\begin_layout Plain Layout

          "200": {
\end_layout

\begin_layout Plain Layout

            "description": "successful operation",
\end_layout

\begin_layout Plain Layout

            "schema": {
\end_layout

\begin_layout Plain Layout

              "$ref": "#/definitions/Pet"
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          },
\end_layout

\begin_layout Plain Layout

          "400": {
\end_layout

\begin_layout Plain Layout

            "description": "Invalid ID supplied"
\end_layout

\begin_layout Plain Layout

          },
\end_layout

\begin_layout Plain Layout

          "404": {
\end_layout

\begin_layout Plain Layout

            "description": "Pet not found"
\end_layout

\begin_layout Plain Layout

      }}},
\end_layout

\begin_layout Plain Layout

      "post": {...},
\end_layout

\begin_layout Plain Layout

      "delete": {...}
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    "/pet/{petId}/uploadImage": {
\end_layout

\begin_layout Plain Layout

      "post": {...}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

  "definitions": {
\end_layout

\begin_layout Plain Layout

    "Category": {
\end_layout

\begin_layout Plain Layout

      "type": "object",
\end_layout

\begin_layout Plain Layout

      "properties": {
\end_layout

\begin_layout Plain Layout

        "id": {
\end_layout

\begin_layout Plain Layout

          "type": "integer",
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        "name": {
\end_layout

\begin_layout Plain Layout

          "type": "string"
\end_layout

\begin_layout Plain Layout

    }}},
\end_layout

\begin_layout Plain Layout

    "Pet": {
\end_layout

\begin_layout Plain Layout

      "type": "object",
\end_layout

\begin_layout Plain Layout

      "required": [
\end_layout

\begin_layout Plain Layout

        "name",
\end_layout

\begin_layout Plain Layout

        "photoUrls"
\end_layout

\begin_layout Plain Layout

      ],
\end_layout

\begin_layout Plain Layout

      "properties": {
\end_layout

\begin_layout Plain Layout

        "id": {
\end_layout

\begin_layout Plain Layout

          "type": "integer"
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        "category": {
\end_layout

\begin_layout Plain Layout

          "$ref": "#/definitions/Category"
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        "name": {
\end_layout

\begin_layout Plain Layout

          "type": "string",
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        "photoUrls": {
\end_layout

\begin_layout Plain Layout

          "type": "array",
\end_layout

\begin_layout Plain Layout

          "items": {
\end_layout

\begin_layout Plain Layout

            "type": "string"
\end_layout

\begin_layout Plain Layout

}}}}}}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Documento OAS PetStore"

\end_inset

Documento Swagger de PetStore
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Swagger vs.
 Metamodelo
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En el fragmento de Swagger \twohyphens
 Listado de Código
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Documento OAS PetStore"

\end_inset

 \twohyphens
 se define la interfaz (
\emph on
interface
\emph default
) del servicio.
 Entre las líneas 46 y 76, se aprecia la sección 
\emph on
definitions
\emph default
, en donde se detallan tipos de datos complejos disponibles dentro de la
 especificación, y entre las lineas 12 y 38 se encuentra detallada la operación
 (
\emph on
operation
\emph default
) 
\emph on
GET_/pet/{petId}
\emph default
, indicando la entrada y salida de la misma utilizando las keys 
\emph on
parameters
\emph default
 y 
\emph on
responses[200] 
\emph default
respectivamente.
 
\end_layout

\begin_layout Standard
Por un lado, 
\emph on
parameters 
\emph default
\twohyphens
 línea 17 \twohyphens
 define la entrada de dicha operación.
 La misma está compuesta por un objeto del tipo entero (
\emph on
integer - int64
\emph default
).
 Por otro lado, en la clave 
\emph on
200
\emph default
, dentro del objeto 
\emph on
response 
\emph default
\twohyphens
 línea 27 \twohyphens
 se tiene un objeto que encapsula la salida de la operación,
 cuyo esquema es una referencia a 
\emph on
#/definitions/Pet
\emph default
, lo que nos indica que debemos ver la definición de la propiedad 
\emph on
Pet
\emph default
 del objeto 
\emph on
definitions
\emph default
, la misma define sus propiedades en el atributo 
\emph on
properties
\emph default
, compuesto por: un identificador 
\emph on
id
\emph default
, una categoría 
\emph on
category
\emph default
, un nombre 
\emph on
name
\emph default
 y un listado de fotos 
\emph on
photoUrls
\emph default
.
\end_layout

\begin_layout Standard
En la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componentes-de-Operacion"

\end_inset

 se observa la especificación de la operación 
\emph on
GET_/pet/{petId} 
\emph default
y se encuadran los distintos componentes resultantes del metamodelo, mientras
 que en la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componentes-de-Tipos-de-datos"

\end_inset

 se observa la especificación de los distintos tipos de datos disponibles
 en la 
\emph on
interfaz
\emph default
, y se encuadran los distintos mapeos disponibles en el metamodelo.
 En la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EjemploVersionInstanciada"

\end_inset

 se muestra el diagrama de objetos que representa la salida (instancia del
 metamodelo) generada por el componente Conversor para el documento 
\emph on
swagger
\emph default
 utilizado como ejemplo.
 Es importante destacar que la estructura de datos utilizada generará una
 sola vez los tipos de datos, esto quiere decir que sólo existirá una instancia
 por cada tipo definido dentro del documento.
 Por ejemplo, sólo va a existir una instancia que representa al tipo simple
 
\emph on
string
\emph default
, y cada elemento relacionado con este tendrá una referencia.
\end_layout

\begin_layout Standard
En el diagrama de objetos de la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:EjemploVersionInstanciada"

\end_inset

 se puede observar una instancia de la clase 
\emph on
Interface
\emph default
, llamada 
\emph on
PetStore
\emph default
 la cual agrupa las operaciones que ofrece el servicio.
 Recordamos que este servicio cuenta con cuatro operaciones, cada una asociada
 a su respectiva entrada y salida (
\emph on
input
\emph default
/
\emph on
output
\emph default
).
 A su vez cada entrada/salida está relacionada con los parámetros que las
 componen.
 Con el fin de mostrar a manera resumida como queda la instancia del metamodelo,
 solo se detalla la función 
\emph on
GET_/pet/{petId}
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ImgChapter3/usadas/getPetById-(anotado).png
	width 90col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Componentes-de-Operacion"

\end_inset

Componentes de Operación
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ImgChapter3/usadas/getPetByIdDefinitions-(anotado).png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Componentes-de-Tipos-de-datos"

\end_inset

Componentes de Tipos de datos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter3/usadas/OAS vs Metamodelo (instancia).png
	lyxscale 80
	width 90col%
	scaleBeforeRotation

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:EjemploVersionInstanciada"

\end_inset

Ejemplo de metamodelo instanciado para el caso de estudio
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Estructuras y tipos de datos
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En la Tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Correspondencia-Estructura"

\end_inset

 se ilustra como es el mapeo estructural de una especificación Swagger a
 la estructura propuesta en el Metamodelo.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\size footnotesize
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Swagger
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Metamodelo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Definitions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ComplexTypes disponibles.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Property
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Attribute del ComplexType
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Método HTTP en Path
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Operation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Parameter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Parameter del Input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Type y Format
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
SimpleType de Parameter Input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Schema
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ComplexType o ArrayType de Parameter Input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Response
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Parameter del Output o Fault
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Type y Format
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
SimpleType de Parameter Output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Schema
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ComplexType o ArrayType de Parameter Output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type=array
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ArrayType
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

items.type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type del ArrayType
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type=object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ComplexType
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

properties
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Attributes del ComplexType
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Correspondencia-Estructura"

\end_inset

Correspondencia estructural Swagger con Metamodelo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los tipos de datos primitivos en la especificación 
\emph on
Swagger
\emph default
 se basan en los tipos admitidos por la Especificación de esquema JSON (Borrador
 00
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tools.ietf.org/html/draft-wright-json-schema-00#section-4.2
\end_layout

\end_inset


\end_layout

\end_inset

).
 
\emph on
Null
\emph default
 no es compatible como tipo.
 
\end_layout

\begin_layout Standard
Los tipos de datos primitivos tienen una propiedad modificadora opcional:
 
\emph on
format
\emph default
.
 La especificación Swagger utiliza varios formatos conocidos para definir
 en detalle el tipo de datos que se utiliza.
 Sin embargo, para mantener las necesidades de la documentación, la propiedad
 
\emph on
format
\emph default
 puede tener cualquier valor.
 Los formatos como 
\begin_inset Quotes eld
\end_inset

email
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

uuid
\begin_inset Quotes erd
\end_inset

, etc., pueden usarse aunque no estén definidos por esta especificación.
 Los tipos que no poseen la propiedad format siguen la definición de tipo
 del esquema JSON.
 Ésta herramienta, al no encontrarse con un 
\emph on
format
\emph default
 puede utilizar el tipo predeterminado.
 Adicionalmente, un tipo de dato primitivo 
\begin_inset Quotes eld
\end_inset

file
\begin_inset Quotes erd
\end_inset

 es usado por el objeto Parameter y Response para denotar que el tipo del
 parámetro o de respuesta es un archivo.
 
\end_layout

\begin_layout Standard
Todos los tipos de datos simple soportados por la especificación Swagger
 están incluidos en los tipos de datos definidos por el Metamodelo, como
 se puede observar en la Tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Correspondencia-Tipos-de-datos"

\end_inset

.
 En la columna 
\emph on
Nombre
\emph default
 se puede observar el nombre coloquial que se le da al tipo de dato, las
 columnas 
\emph on
Type
\emph default
 y 
\emph on
Format
\emph default
 son las propiedades que definen el dato en la especificación, y por último
 la columna 
\emph on
SimpleType 
\emph default
indica el 
\emph on
tipo 
\emph default
que se le asigna a la instancia de SimpleType correspondiente.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="9text%">
<column alignment="center" valignment="top" width="8text%">
<column alignment="center" valignment="top" width="8.5text%">
<column alignment="center" valignment="top" width="35text%">
<column alignment="center" valignment="top" width="18text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size scriptsize
Nombre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size scriptsize
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size scriptsize
Format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size scriptsize
Comentarios
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size scriptsize
SimpleType
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
int32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
32 bits con signo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
INTEGER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
int64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
64 bits con signo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
LONG
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
FLOAT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
DOUBLE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Caracteres codificados en base64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
BASE64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Cualquier secuencia de octales
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
BYTE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
boolean 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
BOOLEAN
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Como se define full-date en RFC3339
\begin_inset Foot
status open

\begin_layout Plain Layout

\size scriptsize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
DATE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
dateTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
date-time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Como se define date-time en RFC3339
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
DATE_TIME
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
string 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Especifica que la UI debe ofuscar el input
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
BASE64_BINARY
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Correspondencia-Tipos-de-datos"

\end_inset

Correspondencia Tipos de datos Simple con Metamodelo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Construcción-del-instanciador"

\end_inset

Construcción del Conversor
\end_layout

\begin_layout Standard
Primeramente fue necesario analizar las herramientas que se encuentran disponibl
es que podrían ser potencialmente útiles a la hora de implementar el módulo
 de software Conversor del Metamodelo.
 Luego se explica en detalle el proceso de conversión de documentos Swagger
 a instancias del metamodelo junto con los algoritmos involucrados para
 realizar dichas operaciones.
 
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:Selección-del-lenguaje"

\end_inset

Selección del lenguaje de programación utilizado
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
El Metamodelo y la herramienta de evaluación de servicios web están realizadas
 en Java
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Gosling05"

\end_inset

 y Kotlin
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://kotlinlang.
\end_layout

\end_inset


\end_layout

\end_inset

, otro lenguaje que se ejecuta sobre la JVM (Java Virtual Machine) y simplifica
 el trabajo del desarrollador, el cual pasa menos tiempo escribiendo lógica
 ajena al dominio.
 Un aspecto importante que destacar es que Kotlin al compilar a Bytecode
 y correr sobre la JVM, es totalmente interoperable con Java, es decir,
 desde nuestro código Kotlin podemos utilizar clases y métodos Java y viceversa,
 inclusive podemos tener un proyecto mixto, en donde coexistan clases Java
 y Kotlin dentro del mismo entorno de desarrollo.
 Entre algunas de las ventajas de Kotlin, se encuentran los constructores
 de clase por defecto, sólo es necesario declarar las variables de clase
 una vez
\emph on
, Setters
\emph default
 y 
\emph on
getters
\emph default
 implícitos, es decir, a menos que se desee cambiar el comportamiento de
 los mismos no es necesario escribirlos; Tipo de clase 
\emph on
Data
\emph default
, la cual está pensada para almacenar datos, por lo tanto infiere los métodos
 
\emph on
equals
\emph default
,
\emph on
 hashCode
\emph default
, 
\emph on
toString
\emph default
 y 
\emph on
copy
\emph default
 de los atributos.
\end_layout

\begin_layout Standard
Sólo con estas ventajas, logramos que nuestra clase 
\emph on
Case
\emph default
 tenga únicamente 10 lineas de código, cuando su equivalente funcional en
 Java tendría aproximadamente 121, esto representa un 91.73% menos de código,
 sin contar que es mas legible.
 Además, a menos que se especifique lo contrario, ninguna variable puede
 tomar el valor 
\emph on
null
\emph default
, esto previene 
\emph on
NullPointerException
\emph default
 inesperados.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Proceso-de-selección"

\end_inset

Selección de herramientas
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Aquí se pretende destacar ventajas y desventajas de las herramientas evaluadas
 para ser utilizadas potencialmente por el módulo de software Conversor.
 En principio, se requiere parsear una especificación Swagger.
 Para ello se analizaron las herramientas
\emph on
 swagger-parser,
\emph default
 
\emph on
KaiZen OpenAPI Parser
\emph default
, 
\emph on
Jackson
\emph default
 y 
\emph on
Klaxon
\emph default
.
 Luego de este análisis, 
\emph on
swagger-parser
\emph default
 resultó ser el candidato más apropiado para la construcción del módulo
 de software Conversor:
\end_layout

\begin_layout Itemize

\series bold
KaiZen OpenAPI Parser
\series default
: Ésta herramienta es la principal competencia de la seleccionada, incluso
 se podría considerar mejor en algunos aspectos, como la performance (que
 según los desarrolladores es tres a cuatro veces superior) y que posee
 un validador semántico para OpenAPI.
 Además acepta especificaciones en JSON o YAML.
 Su principal desventaja es que al momento sólo sirve para especificaciones
 OpenAPI versión 3, la cual no se ha terminado de adoptar por la comunidad,
 y están lejos de convertirse en un estándar.
 Debido a que el dataset utilizado para los experimentos se encuentra en
 OpenApi v2, y no se encuentran tantas especificaciones libres de OpenAPI
 v3, se decidió ignorar ésta última, y por lo tanto, ésta herramienta.
\end_layout

\begin_layout Itemize

\series bold
Jackson
\series default
: Ésta herramienta es el estándar para trabajar con documentos JSON en lenguajes
 Java o dentro de la JVM
\emph on
.
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/FasterXML/jackson
\end_layout

\end_inset


\end_layout

\end_inset

, la misma nos ofrece todas las funcionalidades que necesitamos si quisiéramos
 leer directamente desde la especificación Swagger en formato JSON y acceder
 a las distintas partes de la misma.
 Sin embargo, al utilizarla sólo podríamos procesar especificaciones en
 JSON y no en YAML, perdiendo un subconjunto de las mismas, o teniendo que
 transformar dichas especificaciones al formato JSON.
 Además, al parsear un documento JSON se debe contar con la estructura del
 objeto con el cual se va mapear.
 Por ejemplo, para un JSON de 
\emph on
Persona
\emph default
 con atributos 
\emph on
Nombre
\emph default
,
\emph on
 apellido 
\emph default
y
\emph on
 dirección
\emph default
, necesitamos describir de antemano la clase Java (o Kotlin en éste caso)
 
\emph on
Persona
\emph default
 con dichos atributos, lo cual no es siempre posible.
\end_layout

\begin_layout Itemize

\series bold
Klaxon
\series default
: Ésta herramienta nos permite trabajar con documentos JSON dentro de Kotlin,
 los motivos por los cuales se descartó son los mismos que para la librería
 
\emph on
Jackson
\emph default
.
\end_layout

\begin_layout Standard
Luego, 
\emph on
Swagger-parser
\emph default
 permitió convertir una especificación Swagger en instancias de Objeto Plano
 de Java (POJO).
 Utilizando esta herramienta, en lugar de leer y acceder de manera directa
 a los archivos, podemos ignorar la disposición de los distintos componentes
 en el mismo y concentrarnos en el mapeo Swagger-Metamodelo.
 Como así también, tener la posibilidad de utilizar una especificación Swagger
 en archivo YAML o JSON sin tener que realizar ningún 
\emph on
refactoring 
\emph default
adicional.
 Otra ventaja que nos brinda ésta herramienta, es la validación a nivel
 sintáctico de las especificaciones.
\end_layout

\begin_layout Paragraph
Consideraciones generales
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Se consideran las especificaciones Swagger a parsear como válidas.
 Por ejemplo, en la documentación de Swagger
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "swagger2.0"

\end_inset

 se indica: 
\begin_inset Quotes eld
\end_inset

El objeto Response 
\emph on
debe
\emph default
 contener al menos algún código de respuesta, y 
\emph on
debería
\emph default
 ser la respuesta del llamado de una operación exitosa
\begin_inset Quotes erd
\end_inset

.
 Si esta condición no se respeta en la especificación y se utiliza la herramient
a en cuestión, se pueden obtener resultados inesperados.
 Esto simplifica la herramienta y ayuda a una generar una abstracción de
 capas.
 Los códigos de estado HTTP
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tools.ietf.org/ html/rfc7231#section-6
\end_layout

\end_inset


\end_layout

\end_inset

 son utilizados para indicar el estado de la operación realizada
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.iana.org/ assignments/http-status-codes/http-status-codes.xhtml
\end_layout

\end_inset


\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Todos los nombres en la especificación son sensibles a mayúsculas y minúsculas.
 El esquema expone dos tipos de campos: Campos fijos, que tienen un nombre
 declarado, y Campos modelados, que declaran un patrón de expresiones regulares
 para el nombre del campo.
 Los campos modelados DEBEN tener nombres únicos dentro del objeto contenedor.
 
\end_layout

\begin_layout Standard
Si bien las API pueden ser definidas por documentos Swagger en formato YAML
 o JSON, no es requerido que las API en cuestión se limite a utilizar estos
 formatos, es decir, el 
\emph on
body
\emph default
 del 
\emph on
request
\emph default
 y 
\emph on
response
\emph default
 de dicha API y otros contenidos no requieren ser JSON o YAML.
\end_layout

\begin_layout Paragraph
Conversión de especificaciones Swagger a instancias del metamodelo
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
El Conversor desarrollado recibe como entrada una especificación Swagger
 (específicamente el 
\emph on
path 
\emph default
o URL de la misma) y devuelve como salida una instancia del metamodelo.
 Siguiendo nuestro ejemplo 
\emph on
PetStore
\emph default
, la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ejemplo-versión-Dom-1"

\end_inset

 muestra un esquema de la estructura con los distintos atributos que conforman
 una especificación Swagger al parsearla con la herramienta 
\emph on
Swagger-parser
\emph default
.
 Cabe destacar que en esta figura, solo se detalla la operación 
\emph on
GET_/pet/{petId}
\emph default
, con el objetivo de dar un ejemplo gráfico de fácil comprensión.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImgChapter3/usadas/UML OAS.png
	width 90text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ejemplo-versión-Dom-1"

\end_inset

Ejemplo de objetos que se analizan del documento Swagger, parseado con la
 herramienta Swagger-parser.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A continuación se detalla el pseudocódigo del conversor.
 En el Algoritmo
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Convertir-especificación-Open"

\end_inset

 la función propuesta recibe como entrada una especificación Swagger \twohyphens
 línea
 1.
 El primer paso es parsearlo a un objeto que posee la estructura de la especific
ación Swagger \twohyphens
 línea 2.
 Luego por cada método HTTP perteneciente a cada 
\emph on
path
\emph default
 crearemos una operación del metamodelo - línea 30, con los atributos 
\emph on
input
\emph default
, 
\emph on
output
\emph default
 y 
\emph on
faults 
\emph default
obtenidos previamente.
 Por cada 
\emph on
parameter 
\emph default
de la operación crearemos un 
\emph on
metamodelParameter 
\emph default
obteniendo el tipo de dato según el procedimiento detallado en el Algoritmo
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Convertir-especificación-Open"

\end_inset

.
 Con éstos parámetros crearemos nuestro input.
\end_layout

\begin_layout Standard
Cada respuesta (
\emph on
response
\emph default
) de la operación puede ser exitosa o fallida.
 El 
\emph on
status code 
\emph default
de la respuesta exitosa comenzará con el número 
\emph on
2
\emph default
, y si tiene un tipo se creará un parámetro que luego será usado en el 
\emph on
output
\emph default
 - línea 20.
 Caso contrario, se crea un nuevo 
\emph on
Fault 
\emph default
con el tipo de la respuesta, y se agregará a la lista de 
\emph on
faults
\emph default
 - línea 26 y 27.
 Una vez recorridas las operaciones de cada 
\emph on
path,
\emph default
 se crea la interfaz del metamodelo con las mismas \twohyphens
 línea 34.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,numberstyle={\scriptsize},basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function convertir_Swagger_A_Metamodelo(String SwaggerSpecPath){
\end_layout

\begin_layout Plain Layout

 Swagger swaggerSpec = SwaggerParser().read(SwaggerSpecPath)
\end_layout

\begin_layout Plain Layout

 List<Operation> operations = []
\end_layout

\begin_layout Plain Layout

 for(path: swaggerSpec.paths){
\end_layout

\begin_layout Plain Layout

  for(operation: path.methods){
\end_layout

\begin_layout Plain Layout

   List<Parameter> parameters = []
\end_layout

\begin_layout Plain Layout

   for(parameter: operation.parameters){
\end_layout

\begin_layout Plain Layout

    Type parameterType = obtenerTipoDeDatoParameter(parameter, swaggerSpec)
\end_layout

\begin_layout Plain Layout

    Parameter metamodelParameter = 'Crear Parameter con parameter.name y
 parameterType'
\end_layout

\begin_layout Plain Layout

    parameters.add(metamodelParameter)
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   Input input = 'Crear Input con parameters';
\end_layout

\begin_layout Plain Layout

   Output output = null
\end_layout

\begin_layout Plain Layout

   List<Fault> faults = []
\end_layout

\begin_layout Plain Layout

   for(response in operation.reponses){
\end_layout

\begin_layout Plain Layout

    Type responseType = obtenerTipoDeDatoParameter(response.value.responseSchema,
 swaggerSpec)
\end_layout

\begin_layout Plain Layout

    if(response.statusCode.startsWith("2")){
\end_layout

\begin_layout Plain Layout

     List<Parameter> outputParameters = []
\end_layout

\begin_layout Plain Layout

     if(responseType != null){
\end_layout

\begin_layout Plain Layout

      Parameter outputParameter = 'Crear outputParameter con tipo responseType'
\end_layout

\begin_layout Plain Layout

      outputParameters.add(outputParameter)
\end_layout

\begin_layout Plain Layout

     }
\end_layout

\begin_layout Plain Layout

     output = 'Crear output con outputParameters'
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else{
\end_layout

\begin_layout Plain Layout

     Fault fault = "Crear fault con tipo responseType"
\end_layout

\begin_layout Plain Layout

     faults.add(fault)
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

   Operation metamodelOperation = 'Crear operacion con input, output y faults'
\end_layout

\begin_layout Plain Layout

   operations.add(metamodelOperation)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 Interface metamodelInterface = 'Crear interface con operations'
\end_layout

\begin_layout Plain Layout

 return metamodelInterface
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Convertir-especificación-Open"

\end_inset

Convertir especificación Swagger a Metamodelo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function Type obtenerTipoDeDatoParameter(Parameter parameter, Swagger swaggerSpe
c) {
\end_layout

\begin_layout Plain Layout

 if(parameter.isInstanceOf(HeaderParameter | QueryParameter | PathParameter)){
\end_layout

\begin_layout Plain Layout

  SimpleType type = obtenerTipoSimple(parameter.type, parameter.format, null,
 parameter.items, swaggerSpec)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(parameter.isInstanceOf(BodyParameter)){
\end_layout

\begin_layout Plain Layout

  Schema schema = parameter.schema
\end_layout

\begin_layout Plain Layout

  if(schema.isInstanceOf(ModelImpl)){
\end_layout

\begin_layout Plain Layout

   SimpleType type = obtenerTipoSimple(schema.type, schema.format, schema,
 null, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(schema.isInstanceOf(ArrayModel)){
\end_layout

\begin_layout Plain Layout

   Type arrayType = obtenerTipo(schema.items, swaggerSpec)
\end_layout

\begin_layout Plain Layout

   ArrayType type = 'Crear type con arrayType'
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(schema.isInstanceOf(RefModel)){
\end_layout

\begin_layout Plain Layout

   ComplexType type = obtenerTipoComplejo(schema.simpleRef, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(schema is Null){
\end_layout

\begin_layout Plain Layout

   type = null
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 return type
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Obtener tipo de parameter"

\end_inset

Obtener tipo de parámetro
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function Type obtenerTipo(Property property, Swagger swaggerSpec) {
\end_layout

\begin_layout Plain Layout

 if(property.isInstanceOf(ArrayProperty){
\end_layout

\begin_layout Plain Layout

  Type arrayType = obtenerTipo(property.items, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  ArrayType type = 'Crear type con arrayType'
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(property.isInstanceOf(ObjectProperty)){
\end_layout

\begin_layout Plain Layout

  List<Attribute> attributes = []
\end_layout

\begin_layout Plain Layout

  for(property in property.properties){
\end_layout

\begin_layout Plain Layout

   Type type = obtenerTipo(property.value, swaggerSpec)
\end_layout

\begin_layout Plain Layout

   Attribute attribute = Attribute(property.key, type)
\end_layout

\begin_layout Plain Layout

   attributes.add(attribute)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  ComplexType type = 'Crear type con property.name y attributes'
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(property.isInstanceOf(MapProperty)){
\end_layout

\begin_layout Plain Layout

  Property additionalProperties = property.additionalProperties
\end_layout

\begin_layout Plain Layout

  Type additionalPropertyType = obtenerTipo(additionalProperties, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  Attribute attribute = Attribute(additionalProperties.title, additionalPropertyT
ype)
\end_layout

\begin_layout Plain Layout

  ComplexType type = 'Crear type con property.name y attribute'
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(property.isInstanceOf(RefProperty){
\end_layout

\begin_layout Plain Layout

  ComplexType type = obtenerTipoComplejo(property.simpleRef, swaggerSpec)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else{
\end_layout

\begin_layout Plain Layout

  SimpleType type =  obtenerTipoSimple(property.type, property.format, null,
 null, swaggerSpec)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 return type
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Obtener tipo"

\end_inset

Obtener tipo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function Type obtenerTipoComplejo(String name, Swagger swaggerSpec) {
\end_layout

\begin_layout Plain Layout

 List<Attribute> attributes = []
\end_layout

\begin_layout Plain Layout

 Schema schema = swaggerSpec.definitions[name]
\end_layout

\begin_layout Plain Layout

 for(property in schema.properties){
\end_layout

\begin_layout Plain Layout

  Type type = obtenerTipo(property.value, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  Attribute attribute = Attribute(property.key, type)
\end_layout

\begin_layout Plain Layout

  attributes.add(attribute)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 Property additionalProperties = schema.additionalProperties
\end_layout

\begin_layout Plain Layout

 if(schema.isInstanceOf(ModelImpl) && additionalProperties != null) {
\end_layout

\begin_layout Plain Layout

  Type additionalPropertyType = obtenerTipo(additionalProperties, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  Attribute attribute = Attribute(additionalProperties.title, additionalPropertyT
ype)
\end_layout

\begin_layout Plain Layout

  attributes.add(attribute)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 ComplexType type = 'Crear type con property.name y attribute'
\end_layout

\begin_layout Plain Layout

 return type
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Obtener tipo complejo"

\end_inset

Obtener tipo complejo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,numberstyle={\ttfamily\scriptsize}"
inline false
status open

\begin_layout Plain Layout

function Type obtenerTipoSimple(String typeName, String format, ModelImpl
 schema, Property properties, Swagger swaggerSpec) {
\end_layout

\begin_layout Plain Layout

 if(typeName=="integer"){
\end_layout

\begin_layout Plain Layout

  if(format=="int64"){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.LONG)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else{
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.INTEGER)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeName=="number"){
\end_layout

\begin_layout Plain Layout

  if(format=="double"){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.DOUBLE)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else{
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.FLOAT)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeName=="boolean"){
\end_layout

\begin_layout Plain Layout

  SimpleType simpleType = SimpleType(SimpleType.BOOLEAN)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeName=="string"){
\end_layout

\begin_layout Plain Layout

  if(format=="byte" || format=="base64""){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.BASE64)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(format=="binary"){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.BYTE)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(format=="date"){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.DATE)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else if(format=="date-time"){
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.DATE_TIME)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else{
\end_layout

\begin_layout Plain Layout

   SimpleType simpleType = SimpleType(SimpleType.STRING)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeName=="file"){
\end_layout

\begin_layout Plain Layout

  SimpleType simpleType = SimpleType(SimpleType.BASE64_BINARY)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeName=="object"){
\end_layout

\begin_layout Plain Layout

  List<Attribute> attributes = []
\end_layout

\begin_layout Plain Layout

  for(property in schema.properties){
\end_layout

\begin_layout Plain Layout

   Type propertyType = obtenerTipo(property.value, swaggerSpec)
\end_layout

\begin_layout Plain Layout

   Attribute attribute = Attribute(property.key, propertyType)
\end_layout

\begin_layout Plain Layout

   attributes.add(attribute)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  ComplexType type = 'Crear type con schema.name y attributes'
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 else if(typeNamee=="array"){
\end_layout

\begin_layout Plain Layout

  Type arrayType = obtenerTipo(properties, swaggerSpec)
\end_layout

\begin_layout Plain Layout

  ArrayType type = ArrayType(arrayType)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 return type
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Obtener tipo simple"

\end_inset

Obtener tipo simple
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusión
\end_layout

\begin_layout Standard
A lo largo de este capítulo se detalló como se utilizó la metodología CBR
 dentro del contexto de evaluación y selección de Servicios Web y qué decisiones
 se tomaron a la hora de su implementación.
 Además se describió como se llevó a cabo el módulo conversor necesario
 para las especificaciones Swagger al Metamodelo, lo que permitió que esta
 selección de Servicios se volviera heterogénea, abarcando tanto especificacione
s WSDL como especificaciones Swagger.
 A continuación (Capítulo 4) se presentará la validación experimental 
\begin_inset Note Note
status open

\begin_layout Plain Layout
que avala
\end_layout

\end_inset

de las herramientas y procedimientos desarrollados.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Falta conclusión: Qué se vio en el capítulo (CBR, Conversor), y que a continuaci
ón (Capítulo 4) se presentará la validación experimental de las herramientas
 y procedimientos desarrollados.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
